
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif

.text

.global EXPORT_SYMBOL(disk_err);
.global EXPORT_SYMBOL(_IsTable);
.global EXPORT_SYMBOL(FullDIG_INIPath);
.global EXPORT_SYMBOL(FullMDI_INIPath);

/*----------------------------------------------------------------*/
AILSFILE_start_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,data_15aad8
		jne    jump_113fa9
		push   $AILSFILE_end_
		push   $AILSFILE_start_
		mov    $0x1,%ebx
		call   ac_AIL_VMM_lock_range
		add    $0x8,%esp
		mov    %ebx,data_15aad8
	jump_113fa9:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AIL_VOC_block_len:
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    (%eax),%eax
		shr    $0x8,%eax
		ret


/*----------------------------------------------------------------*/
AIL_VOC_terminate:
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		cmpl   $0x0,0x874(%ebx)
		je     jump_113fd8
		push   %ebx
		call   *0x874(%ebx)
		add    $0x4,%esp
	jump_113fd8:
		cmpl   $0x0,0x88c(%ebx)
		jle    jump_113fea
		push   %ebx
		call   ac_AIL_release_sample_handle
		add    $0x4,%esp
	jump_113fea:
		movl   $0xffffffff,0x88c(%ebx)
		pop    %ebx
		ret

vtable_113ff8:
		.long   func_11404b
		.long   func_114059
		.long   func_114271
		.long   func_114271
		.long   func_1140c2
		.long   func_114271
		.long   func_1140f7
		.long   func_11410e
		.long   func_114138
		.long   func_1141d6


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_AIL_process_VOC_block)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebx
		mov    0x18(%esp),%ebp
		xor    %edi,%edi
	jump_11402e:
		mov    0x878(%ebx),%esi
		mov    (%esi),%al
		cmp    $0x9,%al
		ja     func_114271
		and    $0xff,%eax
		jmp    *%cs:vtable_113ff8(,%eax,4)


/*----------------------------------------------------------------*/
func_11404b:
/*----------------------------------------------------------------*/
		push   %ebx
		call   AIL_VOC_terminate
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_114059:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x888(%ebx)
		je     func_114271
		push   %esi
		call   AIL_VOC_block_len
		add    $0x4,%esp
		sub    $0x2,%eax
		push   %eax
		lea    0x6(%esi),%eax
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_address
		xor    %eax,%eax
		mov    $0x100,%edi
		mov    0x4(%esi),%al
		xor    %edx,%edx
		sub    %eax,%edi
		mov    $0xf4240,%eax
		div    %edi
		add    $0xc,%esp
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   %ebx
		call   ac_AIL_set_sample_type
		add    $0xc,%esp
		test   %ebp,%ebp
		je     jump_11426c
		push   %ebx
		call   ac_AIL_start_sample
		add    $0x4,%esp
		jmp    jump_11426c


/*----------------------------------------------------------------*/
func_1140c2:
/*----------------------------------------------------------------*/
		mov    0x884(%ebx),%ecx
		cmp    $0xffffffff,%ecx
		je     func_114271
		movswl 0x4(%esi),%eax
		cmp    %ecx,%eax
		jne    jump_1140e8
		movl   $0x1,0x888(%ebx)
		jmp    func_114271
	jump_1140e8:
		movl   $0x0,0x888(%ebx)
		jmp    func_114271


/*----------------------------------------------------------------*/
func_1140f7:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    %esi,0x87c(%ebx)
		mov    0x4(%esi),%ax
		mov    %eax,0x880(%ebx)
		jmp    func_114271


/*----------------------------------------------------------------*/
func_11410e:
/*----------------------------------------------------------------*/
		mov    0x880(%ebx),%edx
		cmp    $0xffff,%edx
		je     jump_11412d
		mov    %edx,%eax
		dec    %edx
		mov    %edx,0x880(%ebx)
		test   %eax,%eax
		je     func_114271
	jump_11412d:
		mov    0x87c(%ebx),%esi
		jmp    func_114271


/*----------------------------------------------------------------*/
func_114138:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x888(%ebx)
		je     func_114271
		cmpb   $0x0,0x7(%esi)
		je     jump_11416b
		push   $0x0
		push   $0x2
		push   %ebx
		call   ac_AIL_set_sample_type
		xor    %eax,%eax
		mov    $0x10000,%edi
		mov    0x4(%esi),%ax
		xor    %edx,%edx
		sub    %eax,%edi
		mov    $0x7a12000,%eax
		jmp    jump_114189
	jump_11416b:
		push   $0x0
		push   $0x0
		push   %ebx
		call   ac_AIL_set_sample_type
		xor    %eax,%eax
		mov    $0x10000,%edi
		mov    0x4(%esi),%ax
		xor    %edx,%edx
		sub    %eax,%edi
		mov    $0xf424000,%eax
	jump_114189:
		div    %edi
		add    $0xc,%esp
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		push   %esi
		call   AIL_VOC_block_len
		add    %eax,%esi
		add    $0x4,%esp
		add    $0x4,%esi
		push   %esi
		call   AIL_VOC_block_len
		add    $0x4,%esp
		sub    $0x2,%eax
		push   %eax
		lea    0x6(%esi),%eax
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_address
		add    $0xc,%esp
		test   %ebp,%ebp
		je     jump_11426c
		push   %ebx
		call   ac_AIL_start_sample
		add    $0x4,%esp
		jmp    jump_11426c


/*----------------------------------------------------------------*/
func_1141d6:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x888(%ebx)
		je     func_114271
		push   %esi
		call   AIL_VOC_block_len
		add    $0x4,%esp
		sub    $0xc,%eax
		push   %eax
		lea    0x10(%esi),%eax
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_address
		add    $0xc,%esp
		mov    0x4(%esi),%ecx
		push   %ecx
		push   %ebx
		call   ac_AIL_set_sample_playback_rate
		mov    0x9(%esi),%ah
		add    $0x8,%esp
		cmp    $0x1,%ah
		jne    jump_11421f
		cmpw   $0x0,0xa(%esi)
		jne    jump_11421f
		push   $0x0
		push   $0x0
		jmp    jump_114256
	jump_11421f:
		cmpb   $0x2,0x9(%esi)
		jne    jump_114232
		cmpw   $0x0,0xa(%esi)
		jne    jump_114232
		push   $0x0
		push   $0x2
		jmp    jump_114256
	jump_114232:
		cmpb   $0x1,0x9(%esi)
		jne    jump_114245
		cmpw   $0x4,0xa(%esi)
		jne    jump_114245
		push   $0x1
		push   $0x1
		jmp    jump_114256
	jump_114245:
		cmpb   $0x2,0x9(%esi)
		jne    jump_11425f
		cmpw   $0x4,0xa(%esi)
		jne    jump_11425f
		push   $0x1
		push   $0x3
	jump_114256:
		push   %ebx
		call   ac_AIL_set_sample_type
		add    $0xc,%esp
	jump_11425f:
		test   %ebp,%ebp
		je     jump_11426c
		push   %ebx
		call   ac_AIL_start_sample
		add    $0x4,%esp
	jump_11426c:
		mov    $0x1,%edi


/*----------------------------------------------------------------*/
func_114271:
/*----------------------------------------------------------------*/
		push   %esi
		call   AIL_VOC_block_len
		add    %esi,%eax
		add    $0x4,%eax
		add    $0x4,%esp
		mov    %eax,0x878(%ebx)
		test   %edi,%edi
		je     jump_11402e
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AIL_VOC_EOS:
/*----------------------------------------------------------------*/
		push   $0x1
		mov    0x8(%esp),%edx
		push   %edx
		call   ac_AIL_process_VOC_block
		add    $0x8,%esp
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_AIL_process_WAV_image)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x14(%esp),%edi
		mov    0x10(%esp),%esi
		mov    $ascFmt,%ecx
		add    $0xc,%esi
	jump_1142c3:
		mov    $0x4,%ebx
		mov    %ecx,%edx
		mov    %esi,%eax
		call   ac_strnicmp
		test   %eax,%eax
		je     jump_1142e7
		mov    0x4(%esi),%eax
		add    %esi,%eax
		mov    0x4(%esi),%esi
		add    $0x8,%eax
		and    $0x1,%esi
		add    %eax,%esi
		jmp    jump_1142c3
	jump_1142e7:
		cmpw   $0x1,0xa(%esi)
		jne    jump_1142f9
		cmpw   $0x8,0x16(%esi)
		jne    jump_1142f9
		push   %eax
		push   %eax
		jmp    jump_114333
	jump_1142f9:
		cmpw   $0x2,0xa(%esi)
		jne    jump_11430d
		cmpw   $0x8,0x16(%esi)
		jne    jump_11430d
		push   $0x0
		push   $0x2
		jmp    jump_114333
	jump_11430d:
		cmpw   $0x1,0xa(%esi)
		jne    jump_114321
		cmpw   $0x10,0x16(%esi)
		jne    jump_114321
		push   $0x1
		push   $0x1
		jmp    jump_114333
	jump_114321:
		cmpw   $0x2,0xa(%esi)
		jne    jump_11433c
		cmpw   $0x10,0x16(%esi)
		jne    jump_11433c
		push   $0x1
		push   $0x3
	jump_114333:
		push   %edi
		call   ac_AIL_set_sample_type
		add    $0xc,%esp
	jump_11433c:
		mov    0xc(%esi),%edx
		push   %edx
		push   %edi
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		mov    0x10(%esp),%esi
		add    $0xc,%esi
		mov    $0x4,%ecx
	jump_114355:
		mov    $ascData,%edx
		mov    %ecx,%ebx
		mov    %esi,%eax
		call   ac_strnicmp
		test   %eax,%eax
		je     jump_114379
		mov    0x4(%esi),%eax
		mov    0x4(%esi),%edx
		add    %esi,%eax
		and    $0x1,%edx
		lea    0x8(%eax),%esi
		add    %edx,%esi
		jmp    jump_114355
	jump_114379:
		mov    0x4(%esi),%ebx
		push   %ebx
		add    $0x8,%esi
		push   %esi
		push   %edi
		call   ac_AIL_set_sample_address
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AIL_WAV_EOS:
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		cmpl   $0x0,0x874(%ebx)
		je     jump_1143a8
		push   %ebx
		call   *0x874(%ebx)
		add    $0x4,%esp
	jump_1143a8:
		cmpl   $0x0,0x88c(%ebx)
		jle    jump_1143ba
		push   %ebx
		call   ac_AIL_release_sample_handle
		add    $0x4,%esp
	jump_1143ba:
		movl   $0xffffffff,0x88c(%ebx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_AIL_API_set_sample_file:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%esi
		mov    0x14(%esp),%ecx
		mov    $0x8,%ebx
		mov    $ascCreative,%edx
		mov    %ecx,%eax
		call   ac_strnicmp
		test   %eax,%eax
		je     jump_114554
		mov    $0x4,%ebx
		mov    $ascWave,%edx
		lea    0x8(%ecx),%eax
		call   ac_strnicmp
		test   %eax,%eax
		je     jump_11454f
		mov    $0x9,%ecx
		mov    $AIL_error,%edi
		mov    $aUnrecognizedDi,%esi
		xor    %eax,%eax
		rep movsl %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_11454f:
		mov    $0x1,%eax
	jump_114554:
		test   %eax,%eax
		jbe    jump_11455f
		cmp    $0x1,%eax
		je     jump_11459c
		jmp    jump_1145b0
	jump_11455f:
		xor    %eax,%eax
		mov    0x14(%ecx),%ax
		add    %eax,%ecx
		mov    0x18(%esp),%eax
		mov    %ecx,0x878(%esi)
		mov    %eax,0x884(%esi)
		cmp    $0xffffffff,%eax
		sete   %al
		push   $0x0
		and    $0xff,%eax
		movl   $0x0,0x88c(%esi)
		push   %esi
		mov    %eax,0x888(%esi)
		call   ac_AIL_process_VOC_block
		jmp    jump_1145ad
	jump_11459c:
		push   %esi
		push   %ecx
		movl   $0x0,0x88c(%esi)
		call   ac_AIL_process_WAV_image
	jump_1145ad:
		add    $0x8,%esp
	jump_1145b0:
		cmpl   $0xffffffff,0x88c(%esi)
		jne    jump_1145d3
		mov    $0x7,%ecx
		mov    $AIL_error,%edi
		mov    $aInvalidOrMissi,%esi
		xor    %eax,%eax
		rep movsl %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1145d3:
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AILSFILE_end_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,data_15aad8
		je     jump_114626
		push   $AILSFILE_end_
		push   $AILSFILE_start_
		xor    %ebx,%ebx
		call   ac_AIL_VMM_unlock_range
		add    $0x8,%esp
		mov    %ebx,data_15aad8
	jump_114626:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AILXMIDI_start_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,MDI_locked
		jne    jump_114741
		push   $AILXMIDI_end_
		push   $AILXMIDI_start_
		call   ac_AIL_VMM_lock_range
		add    $0x8,%esp
		push   $0x80
		push   $GTL_prefix
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_entry
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_S
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_i
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_j
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_n
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_sequence_done
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_q
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_t
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_channel
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_status
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_type
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_len
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_ptr
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_event
		mov    $0x1,%ebx
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		mov    %ebx,MDI_locked
	jump_114741:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
_AIL_API_branch_index:	/* 0x117170 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%edi
		mov    0x18(%esp),%esi
		test   %edi,%edi
		je     jump_1171f9
		mov    0xc(%edi),%edx
		test   %edx,%edx
		je     jump_1171f9
		mov    %edx,%eax
		lea    0xa(%edx),%ebp
		movswl 0x8(%edx),%ecx
		xor    %edx,%eax
		test   %ecx,%ecx
		jle    jump_1171b1
		mov    %ebp,%edx
	jump_1171a0:
		xor    %ebx,%ebx
		mov    (%edx),%bx
		cmp    %esi,%ebx
		je     jump_1171b1
		inc    %eax
		add    $0x6,%edx
		cmp    %ecx,%eax
		jl     jump_1171a0
	jump_1171b1:
		cmp    %ecx,%eax
		je     jump_1171f9
		mov    %eax,%edx
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		add    %eax,%ebp
		mov    0x10(%edi),%eax
		mov    0x2(%ebp),%edx
		add    $0x8,%eax
		movl   $0x0,0x30(%edi)
		add    %edx,%eax
		mov    EXPORT_SYMBOL(AIL_preference)+60,%ebx	/* AIL_preference[MDI_ALLOW_LOOP_BRANCHING] */
		mov    %eax,0x14(%edi)
		test   %ebx,%ebx
		jne    jump_1171f9
		mov    %edi,%eax
		lea    0x10(%edi),%edx
	jump_1171e8:
		add    $0x4,%eax
		movl   $0xffffffff,0x80(%eax)
		cmp    %edx,%eax
		jne    jump_1171e8
	jump_1171f9:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AILXMIDI_end_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,MDI_locked
		je     jump_11781f
		push   $AILXMIDI_end_
		push   $AILXMIDI_start_
		call   ac_AIL_VMM_unlock_range
		add    $0x8,%esp
		push   $0x80
		push   $GTL_prefix
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_entry
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_S
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_i
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_n
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_sequence_done
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_q
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_t
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_channel
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_status
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_type
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_len
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_ptr
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_event
		xor    %ebx,%ebx
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		mov    %ebx,MDI_locked
	jump_11781f:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

.section .rodata

data_117830:
		.ascii  "\x08\x00\x00\x00\x11\x00\x00\x00"
		.ascii  "\x12\x00\x00\x00\x13\x00\x00\x00"
		.ascii  "\x14\x00\x00\x00\x15\x00\x00\x00"
		.ascii  "\x17\x00\x00\x00\x18\x00\x00\x00"
		.ascii  "\x1a\x00\x00\x00\x1b\x00\x00\x00"
		.ascii  "\x1d\x00\x00\x00\x1e\x00\x00\x00"
		.ascii  "\x20\x00\x00\x00\x22\x00\x00\x00"
		.ascii  "\x24\x00\x00\x00\x26\x00\x00\x00"
		.ascii  "\x29\x00\x00\x00\x2b\x00\x00\x00"
		.ascii  "\x2e\x00\x00\x00\x31\x00\x00\x00"
		.ascii  "\x33\x00\x00\x00\x37\x00\x00\x00"
		.ascii  "\x3a\x00\x00\x00\x3d\x00\x00\x00"
		.ascii  "\x41\x00\x00\x00\x45\x00\x00\x00"
		.ascii  "\x49\x00\x00\x00\x4d\x00\x00\x00"
		.ascii  "\x52\x00\x00\x00\x57\x00\x00\x00"
		.ascii  "\x5c\x00\x00\x00\x62\x00\x00\x00"
		.ascii  "\x67\x00\x00\x00\x6e\x00\x00\x00"
		.ascii  "\x74\x00\x00\x00\x7b\x00\x00\x00"
		.ascii  "\x82\x00\x00\x00\x8a\x00\x00\x00"
		.ascii  "\x92\x00\x00\x00\x9b\x00\x00\x00"
		.ascii  "\xa4\x00\x00\x00\xae\x00\x00\x00"
		.ascii  "\xb9\x00\x00\x00\xc4\x00\x00\x00"
		.ascii  "\xcf\x00\x00\x00\xdc\x00\x00\x00"
		.ascii  "\xe9\x00\x00\x00\xf7\x00\x00\x00"
		.ascii  "\x05\x01\x00\x00\x15\x01\x00\x00"
		.ascii  "\x25\x01\x00\x00\x37\x01\x00\x00"
		.ascii  "\x49\x01\x00\x00\x5d\x01\x00\x00"
		.ascii  "\x72\x01\x00\x00\x88\x01\x00\x00"
		.ascii  "\x9f\x01\x00\x00\xb8\x01\x00\x00"
		.ascii  "\xd2\x01\x00\x00\xed\x01\x00\x00"
		.ascii  "\x0b\x02\x00\x00\x2a\x02\x00\x00"
		.ascii  "\x4b\x02\x00\x00\x6e\x02\x00\x00"
		.ascii  "\x93\x02\x00\x00\xba\x02\x00\x00"
		.ascii  "\xe4\x02\x00\x00\x10\x03\x00\x00"
		.ascii  "\x3e\x03\x00\x00\x70\x03\x00\x00"
		.ascii  "\xa4\x03\x00\x00\xdb\x03\x00\x00"
		.ascii  "\x16\x04\x00\x00\x54\x04\x00\x00"
		.ascii  "\x96\x04\x00\x00\xdc\x04\x00\x00"
		.ascii  "\x26\x05\x00\x00\x74\x05\x00\x00"
		.ascii  "\xc8\x05\x00\x00\x20\x06\x00\x00"
		.ascii  "\x7d\x06\x00\x00\xe0\x06\x00\x00"
		.ascii  "\x48\x07\x00\x00\xb7\x07\x00\x00"
		.ascii  "\x2d\x08\x00\x00\xa9\x08\x00\x00"
		.ascii  "\x2d\x09\x00\x00\xb8\x09\x00\x00"
		.ascii  "\x4c\x0a\x00\x00\xe9\x0a\x00\x00"
		.ascii  "\x90\x0b\x00\x00\x40\x0c\x00\x00"
		.ascii  "\xfa\x0c\x00\x00\xc0\x0d\x00\x00"
		.ascii  "\x91\x0e\x00\x00\x6f\x0f\x00\x00"
		.ascii  "\x5a\x10\x00\x00\x53\x11\x00\x00"
		.ascii  "\x5b\x12\x00\x00\x71\x13\x00\x00"
		.ascii  "\x99\x14\x00\x00\xd3\x15\x00\x00"
		.ascii  "\x20\x17\x00\x00\x80\x18\x00\x00"
		.ascii  "\xf4\x19\x00\x00\x80\x1b\x00\x00"
		.ascii  "\x23\x1d\x00\x00\xde\x1e\x00\x00"
		.ascii  "\xb4\x20\x00\x00\xa6\x22\x00\x00"
		.ascii  "\xb6\x24\x00\x00\xe3\x26\x00\x00"
		.ascii  "\x33\x29\x00\x00\xa6\x2b\x00\x00"
		.ascii  "\x40\x2e\x00\x00\x00\x31\x00\x00"
		.ascii  "\xe9\x33\x00\x00\x00\x37\x00\x00"
		.ascii  "\x46\x3a\x00\x00\xbc\x3d\x00\x00"
		.ascii  "\x69\x41\x00\x00\x4c\x45\x00\x00"
		.ascii  "\x6c\x49\x00\x00\xc6\x4d\x00\x00"
		.ascii  "\x66\x52\x00\x00\x4c\x57\x00\x00"
		.ascii  "\x80\x5c\x00\x00\x00\x62\x00\x00"
.text


/*----------------------------------------------------------------*/
AILXDIG_start_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,_locked_AILXDIG
		jne    jump_117a59
		push   $AILXDIG_end_
		push   $AILXDIG_start_
		mov    $0x1,%ebx
		call   ac_AIL_VMM_lock_range
		add    $0x8,%esp
		mov    %ebx,_locked_AILXDIG
	jump_117a59:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
_XMI_write_log_2:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%esi
		mov    0x14(%esp),%ecx
		mov    0x18(%esp),%eax
		mov    0x1c(%esp),%edx
		mov    %ecx,%edi
		and    $0xf,%ecx
		lea    0x0(,%ecx,4),%ebx
		and    $0xf0,%edi
		add    %esi,%ebx
		cmp    $0xc0,%edi
		jb     jump_117a9d
		jbe    jump_117aa9
		cmp    $0xe0,%edi
		je     jump_117ab4
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117a9d:
		cmp    $0xb0,%edi
		je     jump_117aca
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117aa9:
		and    $0xff,%eax
		mov    %eax,(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117ab4:
		and    $0xff,%eax
		mov    %eax,0x40(%ebx)
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x80(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117aca:
		cmp    $0x5b,%eax
		jb     jump_117b1b
		jbe    jump_117c01
		cmp    $0x70,%eax
		jb     jump_117b05
		jbe    jump_117b7f
		cmp    $0x73,%eax
		jb     jump_117af8
		jbe    jump_117b9b
		cmp    $0x77,%eax
		je     jump_117ba9
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117af8:
		cmp    $0x72,%eax
		je     jump_117b8d
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b05:
		cmp    $0x6e,%eax
		jb     jump_117b0e
		jbe    jump_117b63
		jmp    jump_117b71
	jump_117b0e:
		cmp    $0x5d,%eax
		je     jump_117c0f
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b1b:
		cmp    $0x7,%eax
		jb     jump_117b4b
		jbe    jump_117bc6
		cmp    $0xb,%eax
		jb     jump_117b3e
		jbe    jump_117be4
		cmp    $0x40,%eax
		je     jump_117bf3
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b3e:
		cmp    $0xa,%eax
		je     jump_117bd5
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b4b:
		cmp    $0x1,%eax
		jb     jump_117c28
		jbe    jump_117bb7
		cmp    $0x6,%eax
		je     jump_117c1d
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b63:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0xc0(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b71:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x100(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b7f:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x180(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b8d:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x1c0(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117b9b:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x200(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117ba9:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x240(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117bb7:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x280(%esi,%ecx,4)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117bc6:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x2c0(%esi,%ecx,4)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117bd5:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x300(%esi,%ecx,4)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117be4:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x340(%esi,%ecx,4)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117bf3:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x380(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117c01:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x3c0(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117c0f:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x400(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117c1d:
		xor    %eax,%eax
		mov    %dl,%al
		mov    %eax,0x440(%esi,%ecx,4)
	jump_117c28:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
WVL_search_:
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		mov    %edx,%ecx
		xor    %edx,%edx
	jump_117c36:
		mov    (%eax),%esi
		cmp    $0xffffffff,%esi
		je     jump_117c52
		cmp    %esi,%ecx
		jne    jump_117c46
		cmp    0x4(%eax),%ebx
		je     jump_117c54
	jump_117c46:
		inc    %edx
		add    $0x20,%eax
		cmp    $0x200,%edx
		jl     jump_117c36
	jump_117c52:
		xor    %eax,%eax
	jump_117c54:
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
XDIG_set_volume_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		lea    0x0(,%edx,4),%edx
		lea    (%eax,%edx,1),%ebx
		mov    0x518(%ebx),%edx
		lea    0x0(,%edx,4),%edx
		lea    (%eax,%edx,1),%esi
		mov    0x2d4(%esi),%edx
		imul   0x354(%esi),%edx
		mov    $0x7f,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x618(%ebx),%edx
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		push   %eax
		mov    0x4d4(%ebx),%edi
		push   %edi
		call   ac_AIL_set_sample_volume
		add    $0x8,%esp
		mov    0x314(%esi),%ebp
		push   %ebp
		mov    0x4d4(%ebx),%eax
		push   %eax
		call   ac_AIL_set_sample_pan
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
XDIG_set_pitch_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    %edx,0xc(%esp)
		mov    %edx,%eax
		mov    0x518(%esi,%eax,4),%edi
		mov    0x598(%esi,%eax,4),%edx
		mov    0x5d8(%esi,%eax,4),%ebx
		mov    %edx,(%esp)
		mov    0x558(%esi,%eax,4),%eax
		mov    0x94(%esi,%edi,4),%edx
		mov    %eax,0x8(%esp)
		shl    $0x7,%edx
		mov    0x54(%esi,%edi,4),%eax
		or     %edx,%eax
		cmp    $0x2000,%eax
		jle    jump_117d36
		mov    $0x1,%edx
		sub    $0x1fff,%eax
		jmp    jump_117d4c
	jump_117d36:
		jge    jump_117d48
		mov    $0x2000,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		mov    $0xffffffff,%edx
		jmp    jump_117d4c
	jump_117d48:
		xor    %eax,%eax
		xor    %edx,%edx
	jump_117d4c:
		imul   0x454(%esi,%edi,4),%edx
		add    0x8(%esp),%edx
		test   %edx,%edx
		jge    jump_117d5e
		xor    %edx,%edx
	jump_117d5e:
		cmp    $0x7f,%edx
		jle    jump_117d68
		mov    $0x7f,%edx
	jump_117d68:
		mov    (%esp),%ecx
		mov    data_117830(,%ecx,4),%ecx
		mov    %ecx,0x4(%esp)
		mov    0x8(%esp),%ecx
		mov    data_117830(,%edx,4),%edx
		mov    data_117830(,%ecx,4),%ecx
		sub    %ecx,%edx
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0xd,%edx
		sbb    %edx,%eax
		sar    $0xd,%eax
		lea    (%ecx,%eax,1),%ebp
		cmp    $0x9,%edi
		je     jump_117db9
		mov    %ebx,%edx
		imul   %ecx,%edx
		mov    0x4(%esp),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		imul   %ebp,%eax
		mov    %eax,%edx
		jmp    jump_117dc0
	jump_117db9:
		mov    %ebx,%edx
		imul   %ebp,%edx
		mov    %edx,%eax
	jump_117dc0:
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%ebx
		mov    0xc(%esp),%eax
		push   %ebx
		mov    0x4d4(%esi,%eax,4),%ecx
		push   %ecx
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
_XDIG_TIMB_trap:
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0xc(%esp),%edx
		mov    0x8(%esp),%eax
		mov    0x1b4(%eax),%eax
		mov    0x10(%esp),%ebx
		mov    0x8(%eax),%eax
		call   WVL_search_
		test   %eax,%eax
		setne  %al
		and    $0xff,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
_XDIG_MIDI_trap:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x1c(%esp),%eax
		mov    0x14(%esp),%esi
		mov    %eax,%ebx
		mov    %eax,%edi
		and    $0xf0,%ebx
		and    $0xf,%edi
		mov    0x1b4(%esi),%esi
		cmp    $0xb0,%ebx
		je     jump_117e57
		cmp    $0xc0,%ebx
		je     jump_117e57
		cmp    $0xe0,%ebx
		jne    jump_117e6e
	jump_117e57:
		mov    0x24(%esp),%edx
		push   %edx
		mov    0x24(%esp),%ecx
		push   %ecx
		push   %eax
		lea    0x14(%esi),%eax
		push   %eax
		call   _XMI_write_log_2
		add    $0x10,%esp
	jump_117e6e:
		cmp    $0x90,%ebx
		jne    jump_117e82
		cmpl   $0x0,0x24(%esp)
		jne    jump_117e82
		mov    $0x80,%ebx
	jump_117e82:
		lea    0x0(,%edi,4),%ebp
		add    %esi,%ebp
		cmp    $0xb0,%ebx
		jb     jump_117eb8
		jbe    jump_117edb
		cmp    $0xc0,%ebx
		jb     jump_118234
		jbe    jump_117ff7
		cmp    $0xe0,%ebx
		je     jump_118016
		jmp    jump_118234
	jump_117eb8:
		cmp    $0x80,%ebx
		jb     jump_118234
		jbe    jump_1181d2
		cmp    $0x90,%ebx
		je     jump_118061
		jmp    jump_118234
	jump_117edb:
		mov    0x20(%esp),%edx
		cmp    $0x7,%edx
		jb     jump_117f04
		jbe    jump_117f10
		cmp    $0xa,%edx
		jb     jump_118234
		cmp    $0xb,%edx
		jbe    jump_117f10
		cmp    $0x7b,%edx
		je     jump_117fa6
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117f04:
		cmp    $0x6,%edx
		je     jump_117f5b
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_117f10:
		mov    0x514(%esi),%ecx
		xor    %ebx,%ebx
		test   %ecx,%ecx
		jle    jump_118234
		mov    %esi,%ebp
	jump_117f22:
		cmp    0x518(%ebp),%edi
		jne    jump_117f47
		mov    0x4d4(%ebp),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_117f47
		mov    %ebx,%edx
		mov    %esi,%eax
		call   XDIG_set_volume_
	jump_117f47:
		inc    %ebx
		mov    0x514(%esi),%ecx
		add    $0x4,%ebp
		cmp    %ecx,%ebx
		jge    jump_118234
		jmp    jump_117f22
	jump_117f5b:
		mov    0x514(%esi),%eax
		xor    %ebx,%ebx
		test   %eax,%eax
		jle    jump_118234
		mov    %esi,%ebp
	jump_117f6d:
		cmp    0x518(%ebp),%edi
		jne    jump_117f92
		mov    0x4d4(%ebp),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_117f92
		mov    %ebx,%edx
		mov    %esi,%eax
		call   XDIG_set_pitch_
	jump_117f92:
		inc    %ebx
		mov    0x514(%esi),%ecx
		add    $0x4,%ebp
		cmp    %ecx,%ebx
		jge    jump_118234
		jmp    jump_117f6d
	jump_117fa6:
		mov    0x514(%esi),%edx
		xor    %ebp,%ebp
		test   %edx,%edx
		jle    jump_118234
		mov    %esi,%ebx
	jump_117fb8:
		cmp    0x518(%ebx),%edi
		jne    jump_117fe3
		mov    0x4d4(%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_117fe3
		mov    0x4d4(%ebx),%edx
		push   %edx
		call   ac_AIL_end_sample
		add    $0x4,%esp
	jump_117fe3:
		inc    %ebp
		mov    0x514(%esi),%edx
		add    $0x4,%ebx
		cmp    %edx,%ebp
		jge    jump_118234
		jmp    jump_117fb8
	jump_117ff7:
		mov    0x20(%esp),%ebx
		mov    0x1d4(%ebp),%edx
		mov    0x8(%esi),%eax
		call   WVL_search_
		mov    %eax,0x494(%ebp)
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_118016:
		mov    0x514(%esi),%eax
		xor    %ebx,%ebx
		test   %eax,%eax
		jle    jump_118234
		mov    %esi,%ebp
	jump_118028:
		cmp    0x518(%ebp),%edi
		jne    jump_11804d
		mov    0x4d4(%ebp),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_11804d
		mov    %ebx,%edx
		mov    %esi,%eax
		call   XDIG_set_pitch_
	jump_11804d:
		inc    %ebx
		mov    0x514(%esi),%edx
		add    $0x4,%ebp
		cmp    %edx,%ebx
		jge    jump_118234
		jmp    jump_118028
	jump_118061:
		cmp    $0x9,%edi
		jne    jump_11807d
		mov    0x20(%esp),%ebx
		mov    $0x7f,%edx
		mov    0x8(%esi),%eax
		call   WVL_search_
		mov    %eax,0x494(%ebp)
	jump_11807d:
		cmpl   $0x0,0x494(%esi,%edi,4)
		je     jump_118234
		mov    0x514(%esi),%ecx
		xor    %ebx,%ebx
		test   %ecx,%ecx
		jle    jump_1180bb
		mov    %esi,%ebp
	jump_118099:
		mov    0x4d4(%ebp),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_1180bb
		inc    %ebx
		mov    0x514(%esi),%ecx
		add    $0x4,%ebp
		cmp    %ecx,%ebx
		jl     jump_118099
	jump_1180bb:
		cmp    0x514(%esi),%ebx
		jne    jump_1180fe
		mov    $0xffffffff,%edx
		mov    %ebx,%ecx
		xor    %ebp,%ebp
		test   %ecx,%ecx
		jle    jump_1180ee
		mov    %esi,%eax
	jump_1180d2:
		mov    0x658(%eax),%ecx
		cmp    %ecx,%edx
		jb     jump_1180e0
		mov    %ecx,%edx
		mov    %ebp,%ebx
	jump_1180e0:
		inc    %ebp
		mov    0x514(%esi),%ecx
		add    $0x4,%eax
		cmp    %ecx,%ebp
		jl     jump_1180d2
	jump_1180ee:
		mov    0x4d4(%esi,%ebx,4),%ebp
		push   %ebp
		call   ac_AIL_end_sample
		add    $0x4,%esp
	jump_1180fe:
		mov    0x20(%esp),%eax
		mov    %edi,0x518(%esi,%ebx,4)
		mov    %eax,0x558(%esi,%ebx,4)
		mov    0x494(%esi,%edi,4),%eax
		mov    0x8(%eax),%eax
		mov    %eax,0x598(%esi,%ebx,4)
		mov    0x494(%esi,%edi,4),%eax
		mov    0x1c(%eax),%eax
		mov    %eax,0x5d8(%esi,%ebx,4)
		mov    0x24(%esp),%eax
		mov    %eax,0x618(%esi,%ebx,4)
		mov    0x698(%esi),%eax
		lea    0x1(%eax),%edx
		mov    %edx,0x698(%esi)
		mov    0x4d4(%esi,%ebx,4),%ebp
		push   %ebp
		mov    %eax,0x658(%esi,%ebx,4)
		call   ac_AIL_init_sample
		mov    0x494(%esi,%edi,4),%eax
		add    $0x4,%esp
		mov    0x18(%eax),%edx
		push   %edx
		mov    0x14(%eax),%ecx
		push   %ecx
		mov    0x4d4(%esi,%ebx,4),%ebp
		push   %ebp
		call   ac_AIL_set_sample_type
		mov    0x494(%esi,%edi,4),%eax
		add    $0xc,%esp
		mov    0x10(%eax),%edx
		push   %edx
		mov    0xc(%eax),%eax
		mov    0x8(%esi),%edx
		add    %edx,%eax
		push   %eax
		mov    0x4d4(%esi,%ebx,4),%ecx
		push   %ecx
		call   ac_AIL_set_sample_address
		add    $0xc,%esp
		mov    %ebx,%edx
		mov    %esi,%eax
		call   XDIG_set_pitch_
		mov    %ebx,%edx
		mov    %esi,%eax
		call   XDIG_set_volume_
		mov    0x4d4(%esi,%ebx,4),%edi
		push   %edi
		call   ac_AIL_start_sample
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1181d2:
		cmp    $0x9,%edi
		je     jump_118234
		mov    0x514(%esi),%eax
		xor    %ebp,%ebp
		test   %eax,%eax
		jle    jump_118234
		mov    %esi,%ebx
	jump_1181e5:
		cmp    0x518(%ebx),%edi
		jne    jump_118226
		mov    0x20(%esp),%ecx
		cmp    0x558(%ebx),%ecx
		jne    jump_118226
		mov    0x4d4(%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_118226
		mov    0x4d4(%ebx),%edx
		push   %edx
		call   ac_AIL_end_sample
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_118226:
		inc    %ebp
		mov    0x514(%esi),%eax
		add    $0x4,%ebx
		cmp    %eax,%ebp
		jl     jump_1181e5
	jump_118234:
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AILXDIG_end_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,_locked_AILXDIG
		je     jump_118456
		push   $AILXDIG_end_
		push   $AILXDIG_start_
		xor    %ebx,%ebx
		call   ac_AIL_VMM_unlock_range
		add    $0x8,%esp
		mov    %ebx,_locked_AILXDIG
	jump_118456:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret





.data


GLOBAL (AIL_entry)				/* 0x15aa48 */
		.long	0x0
GLOBAL (AIL_use_locked)			/* 0x15AA4C */
		.long	0x0
GLOBAL (byte_15AA50)	/* 0x15AA50 */
		.ascii  "\x00\x02\x04\x06\x08\x0a\x0c\x0e"
		.ascii  "\x10\x12\x14\x16\x18\x1a\x1c\x1e"
		.ascii  " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.byte	0x80
data_15aad0:
		.long	0x0
data_15aad4:
		.long	0x0
data_15aad8:
		.long	0x0
GLOBAL (GTL_prefix)				/* 0x15AADC */
		.string "SAMPLE"
		.fill   0x79
GLOBAL (MDI_entry)				/* 0x15ab5c */
		.long	0x0
GLOBAL (MDI_locked)
		.long	0x0
aTimb_0:	/* 0x15AB64 */
		.string "TIMB"
		.ascii  "\x00\x00\x04\x01\x00"
data_15ab6e:
		.byte	0xff
data_15ab6f:
		.byte	0xff
_locked_AILXDIG:				/* 0x15AB70 */
		.long	0x0


aOutOfTimerHa_0:	/* 0x161A20 */
		.string "Out of timer handles\n"
		.align 4
ascSS_3:	/* 0x161A38 */
		.string "%s/%s"
		.align 4
aDriverFileNotF:	/* 0x161A40 */
		.string "Driver file not found\n"
		.align 4
aUnableToOpenFi:	/* 0x161A58 */
		.string "Unable to open file DIG.INI\n"
		.align 4
aOutOfSampleHan:	/* 0x161A78 */
		.string "Out of sample handles\n"
		.byte	0x0
ascFmt:	/* 0x161A90 */
		.string "fmt "
		.ascii  "\x00\x00\x00"
ascData:	/* 0x161A98 */
		.string "data"
		.ascii  "\x00\x00\x00"
ascCreative:	/* 0x161AA0 */
		.string "Creative"
		.ascii  "\x00\x00\x00"
ascWave:	/* 0x161AAC */
		.string "WAVE"
		.ascii  "\x00\x00\x00"
aUnrecognized_0:	/* 0x161AB4 */
		.string "Unrecognized digital audio file type\n"
		.short  0x0
aInvalidOrMis_0:	/* 0x161ADC */
		.string "Invalid or missing data block\n"
		.byte	0x0
aUnrecognizedDi:	/* 0x161AFC */
		.string "Unrecognized digital audio file type\n"
		.short  0x0
aInvalidOrMissi:	/* 0x161B24 */
		.string "Invalid or missing data block\n"
		.byte	0x0
ascForm:	/* 0x161B44 */
		.string "FORM"
		.ascii  "\x00\x00\x00"
ascCat:	/* 0x161B4C */
		.string "CAT "
		.ascii  "\x00\x00\x00"
ascXmid:	/* 0x161B54 */
		.string "XMID"
		.ascii  "\x00\x00\x00"
aInternalNoteQu:	/* 0x161B5C */
		.string "Internal note queue overflow\n"
		.short  0x0
aCouldNotAllo_4:	/* 0x161B7C */
		.string "Could not allocate memory for driver\n"
		.short  0x0
a_mdiDriverRequ:	/* 0x161BA4 */
		.string ".MDI driver required\n"
		.short  0x0
aXmidiSoundHard:	/* 0x161BBC */
		.string "XMIDI sound hardware not found\n"
aCouldNotInitia:	/* 0x161BDC */
		.string "Could not initialize instrument manager\n"
		.ascii  "\x00\x00\x00"
aCouldNotAllo_5:	/* 0x161C08 */
		.string "Could not allocate SEQUENCE structures\n"
aOutOfTimerHa_1:	/* 0x161C30 */
		.string "Out of timer handles\n"
		.short  0x0
ascSS_4:	/* 0x161C48 */
		.string "%s/%s"
		.short  0x0
aDriverFileNo_0:	/* 0x161C50 */
		.string "Driver file not found\n"
		.byte	0x0
aUnableToOpen_0:	/* 0x161C68 */
		.string "Unable to open file MDI.INI\n"
		.ascii  "\x00\x00\x00"
aTandy3VoiceMus:	/* 0x161C88 */
		.string "Tandy 3-voice music"
aIbmInternalSpe:	/* 0x161C9C */
		.string "IBM internal speaker music"
		.byte	0x0
asc_ad:	/* 0x161CB8 */
		.ascii  "\x2e\x41\x44\x00"
asc_opl:	/* 0x161CBC */
		.string ".OPL"
		.ascii  "\x00\x00\x00"
aOutOfSequenceH:	/* 0x161CC4 */
		.string "Out of sequence handles\n"
		.ascii  "\x00\x00\x00"
aInvalidXmidiSe:	/* 0x161CE0 */
		.string "Invalid XMIDI sequence\n"
ascTimb:	/* 0x161CF8 */
		.string "TIMB"
		.ascii  "\x00\x00\x00"
ascRbrn:	/* 0x161D00 */
		.string "RBRN"
		.ascii  "\x00\x00\x00"
ascEvnt:	/* 0x161D08 */
		.string "EVNT"
		.ascii  "\x00\x00\x00"
aNoTimbresLoade:	/* 0x161D10 */
		.string "No timbres loaded\n"
		.byte	0x0
aDriverCouldNot:	/* 0x161D24 */
		.string "Driver could not install timbre bank %u, patch %u\n"
		.byte	0x0
aDriverCouldN_0:	/* 0x161D58 */
		.string "Driver could not install timbre bank %u, patch %u\n"
		.byte	0x0
aInsufficient_0:	/* 0x161D8C */
		.string "Insufficient memory for HWAVE descriptor\n"
		.short  0x0


data_1621e0:
		.ascii  "JFMAMJJASOND"
data_1621ec:
		.ascii  "aeapauuuecoe"
data_1621f8:
		.ascii  "nbrrynlgptvc"
data_162204:
		.ascii  "SMTWTFS"
data_16220b:
		.ascii  "uouehra"
data_162212:
		.string "nneduit"
		.short  0x0


/* FILE * */
GLOBAL (AIL_debugfile)		/* 0x1e8fa0 */
		.long	0x0

GLOBAL (AIL_debug)
		.long	0x0

/* 32-bit bool */
GLOBAL (AIL_sys_debug)		/* 0x1e8fa8 */
		.long	0x0

data_1e8fac:
		.long	0x0
data_1e8fb0:
		.long	0x0
GLOBAL (AIL_indent)
		.long	0x0
data_1e8fb8:
		.long	0x0
data_1e8fbc:
		.long	0x0
data_1e8fc0:
		.long	0x0
data_1e8fc4:
		.fill   0x18
data_1e8fdc:
		.fill   0x110

data_1ed6ac:
		.long	0x0
GLOBAL (AIL_driver)	/* 0x1ed6b0 */
		.fill   0x40
GLOBAL (AIL_error)	/* 0x1ED6F0 */
		.fill   0x100
GLOBAL (AIL_last_IO_attempt)	/* 0x1ed7f0 */
		.fill   0x18
GLOBAL (AIL_flags) /* 0x1ed808 */
		.long	0x0

GLOBAL (AIL_preference)	/* 0x1ed80c */
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.fill   0x18

loctm_var1:	/* 0x1ED870 */
		.fill   0x24
asciitm_var1:			/* 0x1ED894 */
		.fill   0x1c
data_1ed8b0:
		.long	0x0
data_1ed8b4:
		.long	0x0
data_1ed8b8:
		.short  0x0
data_1ed8ba:
		.fill   0x6
data_1ed8c0:
		.long	0x0
data_1ed8c4:
		.long	0x0
data_1ed8c8:
		.long	0x0
data_1ed8cc:
		.long	0x0
data_1ed8d0:
		.fill   0x10
GLOBAL (MDI_ptr)		/* 0x1ED8E0 */
		.long	0x0
GLOBAL (MDI_event)
		.long	0x0
GLOBAL (MDI_status)
		.long	0x0
GLOBAL (MDI_len)
		.long	0x0
GLOBAL (MDI_type)		/* 0x1ED8F0 */
		.long	0x0
GLOBAL (MDI_channel)
		.long	0x0
GLOBAL (MDI_S)			/* 0x1ED8F8 */
		.long	0x0
GLOBAL (MDI_i)
		.long	0x0
GLOBAL (MDI_j)			/* 0x1ed900 */
		.long	0x0
GLOBAL (MDI_n)
		.long	0x0
GLOBAL (MDI_q)
		.long	0x0
GLOBAL (MDI_t)
		.long	0x0
GLOBAL (MDI_sequence_done)	/* 0x1ED910 */
		.long	0x0
data_1ed914:
		.fill   0x218

