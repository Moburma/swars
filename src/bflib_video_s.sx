
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif


.text


/*----------------------------------------------------------------*/
/* long LbScreenWaitVbi(void)
 */
ASM_LbScreenWaitVbi_:
/*----------------------------------------------------------------*/
		push   %edx
		push   %ebp
		mov    %esp,%ebp
	jump_ee1c4:
		mov    $0x3da,%edx
		sub    %eax,%eax
		in     (%dx),%al
		test   $0x8,%al
		je     jump_ee1c4
		mov    $0x1,%eax
		pop    %ebp
		pop    %edx
		ret


/*----------------------------------------------------------------*/
LbVesaGetGran_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %ebp
		mov    %esp,%ebp
		sub    $0x7c,%esp
		mov    %eax,-0x4(%ebp)
		mov    $0x32,%ebx
		lea    -0x7c(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    EXPORT_SYMBOL(lbVesaData),%eax
		shr    $0x4,%eax
		mov    %ax,-0x5a(%ebp)
		mov    %ax,-0x58(%ebp)
		xor    %edx,%edx
		mov    %edx,-0x7c(%ebp)
		movl   $0x4f01,-0x60(%ebp)
		movswl -0x4(%ebp),%eax
		mov    %eax,-0x64(%ebp)
		mov    $0x1c,%ebx
		lea    -0x2c(%ebp),%eax
		call   ac_memset
		mov    $0x1c,%ebx
		lea    -0x48(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0xc,%ebx
		lea    -0x10(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		lea    -0x10(%ebp),%eax
		mov    $0x300,%ecx
		call   _segread
		mov    %ecx,-0x2c(%ebp)
		movl   $0x10,-0x28(%ebp)
		lea    -0x7c(%ebp),%eax
		mov    %eax,-0x18(%ebp)
		lea    -0x10(%ebp),%ecx
		lea    -0x48(%ebp),%ebx
		lea    -0x2c(%ebp),%edx
		mov    $0x31,%eax
		call   ac_dos_int386x
		mov    EXPORT_SYMBOL(lbVesaData),%eax
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		mov    %edx,%ebx
		xor    %edx,%edx
		shl    $0x8,%ebx
		mov    0x4(%eax),%dl
		add    %edx,%ebx
		mov    %bx,_lbVesaGran
		xor    %edx,%edx
		mov    0x11(%eax),%dl
		mov    %edx,%ebx
		xor    %edx,%edx
		shl    $0x8,%ebx
		mov    0x10(%eax),%dl
		add    %edx,%ebx
		mov    %bx,_lbVesaBytesPerLine
		xor    %edx,%edx
		mov    0x13(%eax),%dl
		mov    %edx,%ebx
		xor    %edx,%edx
		shl    $0x8,%ebx
		mov    0x12(%eax),%dl
		add    %edx,%ebx
		mov    %bx,_lbVesaHRes
		xor    %edx,%edx
		mov    0x15(%eax),%dl
		shl    $0x8,%edx
		mov    0x14(%eax),%al
		xor    %ah,%ah
		add    %eax,%edx
		mov    %dx,_lbVesaVRes
		mov    $0x1,%eax
		mov    %ebp,%esp
		pop    %ebp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbVesaSetMode_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %ebp
		mov    %esp,%ebp
		sub    $0x3c,%esp
		mov    %eax,-0x4(%ebp)
		mov    $0x1c,%ebx
		lea    -0x3c(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x1c,%ebx
		lea    -0x20(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x4f,-0x3b(%ebp)
		movb   $0x2,-0x3c(%ebp)
		mov    -0x4(%ebp),%eax
		mov    %ax,-0x38(%ebp)
		lea    -0x20(%ebp),%ebx
		lea    -0x3c(%ebp),%edx
		mov    $0x10,%eax
		call   ac_dos_int386
		movswl -0x4(%ebp),%eax
		call   LbVesaGetGran_
		mov    $0x1,%eax
		mov    %ebp,%esp
		pop    %ebp
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* long LbVesaSetPage(long dxp)
 */
GLOBAL_FUNC (ASM_LbVesaSetPage_)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %ebp
		mov    %esp,%ebp
		sub    $0x4,%esp
		mov    %eax,-0x4(%ebp)
		mov    _lbVesaPage,%ax
		cmp    -0x4(%ebp),%ax
		je     jump_eee78
		movswl -0x4(%ebp),%edx
		mov    _lbVesaPage,%ebx
		shl    $0x6,%edx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %ecx,%ecx
		mov    %eax,%edx
		xor    %ebx,%ebx
		mov    $0x4f05,%eax
		push   %bp
		int    $0x10
		pop    %bp
		movswl -0x4(%ebp),%edx
		mov    _lbVesaPage,%ebx
		shl    $0x6,%edx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %ecx,%ecx
		mov    $0x1,%ebx
		mov    %eax,%edx
		mov    $0x4f05,%eax
		push   %bp
		int    $0x10
		pop    %bp
		mov    -0x4(%ebp),%eax
		mov    %ax,_lbVesaPage
	jump_eee78:
		mov    $0x1,%eax
		mov    %ebp,%esp
		pop    %ebp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbVesaGetInfo_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x78,%esp
		mov    $0x32,%ebx
		lea    -0x78(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    EXPORT_SYMBOL(lbVesaData),%eax
		shr    $0x4,%eax
		mov    %ax,-0x56(%ebp)
		mov    %ax,-0x54(%ebp)
		xor    %edx,%edx
		mov    %edx,-0x78(%ebp)
		movl   $0x4f00,-0x5c(%ebp)
		movl   $0x101,-0x68(%ebp)
		mov    $0x1c,%ebx
		lea    -0x28(%ebp),%eax
		call   ac_memset
		mov    $0x1c,%ebx
		lea    -0x44(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0xc,%ebx
		lea    -0xc(%ebp),%eax
		xor    %edx,%edx
		call   ac_memset
		lea    -0xc(%ebp),%eax
		mov    $0x300,%esi
		call   _segread
		mov    %esi,-0x28(%ebp)
		movl   $0x10,-0x24(%ebp)
		lea    -0x78(%ebp),%eax
		mov    %eax,-0x14(%ebp)
		lea    -0xc(%ebp),%ecx
		lea    -0x44(%ebp),%ebx
		lea    -0x28(%ebp),%edx
		mov    $0x31,%eax
		call   ac_dos_int386x
		mov    $0x4,%ebx
		mov    $aVesa,%edx
		mov    EXPORT_SYMBOL(lbVesaData),%eax
		call   ac_strncmp
		test   %eax,%eax
		jne    jump_eef3a
		mov    $0x1,%eax
		jmp    jump_eef3f
	jump_eef3a:
		mov    $0xffffffff,%eax
	jump_eef3f:
		mov    %ebp,%esp
		pop    %ebp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


.section .rodata


aVesa:	/* 0x15F1A8 */
		.string "VESA"
		.align	4

.data

setup:	/* 0x1E2E50 */
		.long	0x0

_lbVesaBytesPerLine:
		.short  0x0
_lbVesaHRes:
		.short  0x0
_lbVesaVRes:
		.long	0x0
ASM_lbVesaData:
		.long	0x0
GLOBAL (_lbVesaPage)
		.short  0x0
_lbVesaGran:
		.short  0x0

GLOBAL (lbScreenDirectAccessActive)
		.long	0x0

