
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif


.text

.global EXPORT_SYMBOL(things);
.global EXPORT_SYMBOL(sthings);
.global EXPORT_SYMBOL(game_my_big_map);
.global EXPORT_SYMBOL(p_track_thing);
.global EXPORT_SYMBOL(p_track2_thing);
.global EXPORT_SYMBOL(mouse_map_x);
.global EXPORT_SYMBOL(mouse_map_y);
.global EXPORT_SYMBOL(mouse_map_z);
.global EXPORT_SYMBOL(colour_lookup);
.global EXPORT_SYMBOL(my_paths);

/*----------------------------------------------------------------*/
draw_unkn_func_07:	/* 0x426fc */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %bx,(%esp)
		mov    %cx,0x4(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_4273b
		mov    -0x2(%esp),%ebx
		xor    %eax,%eax
		movswl %dx,%edx
		mov    0x14(%esp),%al
		sar    $0x10,%ebx
		push   %eax
		movswl %si,%eax
		sar    %edx
		add    %eax,%ebx
		mov    %edx,%ecx
		sar    %ebx
		sar    %eax
		jmp    jump_42753
	jump_4273b:
		mov    -0x2(%esp),%ebx
		xor    %eax,%eax
		movswl %dx,%edx
		mov    0x14(%esp),%al
		sar    $0x10,%ebx
		push   %eax
		movswl %si,%eax
		mov    %edx,%ecx
		add    %eax,%ebx
	jump_42753:
		call   func_e7590
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_4278c
		mov    0x2(%esp),%ecx
		xor    %eax,%eax
		movswl %di,%edx
		mov    0x14(%esp),%al
		movswl %si,%ebx
		push   %eax
		mov    0x2(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		add    %edx,%ecx
		add    %ebx,%eax
		sar    %ecx
		sar    %eax
		sar    %edx
		jmp    jump_427ab
	jump_4278c:
		mov    0x2(%esp),%ecx
		mov    -0x2(%esp),%ebx
		xor    %eax,%eax
		movswl %di,%edx
		mov    0x14(%esp),%al
		sar    $0x10,%ebx
		push   %eax
		movswl %si,%eax
		sar    $0x10,%ecx
		add    %ebx,%eax
		add    %edx,%ecx
	jump_427ab:
		mov    %eax,%ebx
		call   func_e7590
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_427ea
		mov    0x2(%esp),%edx
		xor    %eax,%eax
		mov    -0x2(%esp),%ecx
		mov    0x14(%esp),%al
		sar    $0x10,%edx
		push   %eax
		movswl %di,%eax
		sar    $0x10,%ecx
		add    %eax,%edx
		movswl %si,%eax
		sar    %edx
		mov    %eax,%ebx
		add    %ecx,%eax
		sar    %ebx
		sar    %eax
		mov    %edx,%ecx
		jmp    jump_4280b
	jump_427ea:
		xor    %eax,%eax
		mov    0x2(%esp),%edx
		mov    0x14(%esp),%al
		sar    $0x10,%edx
		push   %eax
		movswl %di,%eax
		add    %eax,%edx
		mov    0x2(%esp),%eax
		movswl %si,%ebx
		sar    $0x10,%eax
		mov    %edx,%ecx
		add    %ebx,%eax
	jump_4280b:
		call   func_e7590
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_4283d
		mov    0x2(%esp),%ebx
		xor    %eax,%eax
		movswl %di,%edx
		mov    0x14(%esp),%al
		mov    %edx,%ecx
		sar    $0x10,%ebx
		push   %eax
		sar    %ecx
		movswl %si,%eax
		add    %ebx,%edx
		sar    %eax
		sar    %edx
		jmp    jump_42853
	jump_4283d:
		mov    0x2(%esp),%edx
		xor    %eax,%eax
		movswl %di,%ecx
		mov    0x14(%esp),%al
		sar    $0x10,%edx
		push   %eax
		movswl %si,%eax
		add    %ecx,%edx
	jump_42853:
		mov    %eax,%ebx
		call   func_e7590
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
unused_func_200:	/* 0xb8860 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %ax,0x8(%esp)
		mov    %dx,0x4(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		xor    %ebp,%ebp
		cmp    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %al,0xc(%esp)
		xor    %eax,%eax
		mov    %bx,%ax
		mov    EXPORT_SYMBOL(same_type_head)+0x200(,%eax,2),%bx
	jump_b8897:
		xor    %eax,%eax
		mov    %bx,%ax
		test   %eax,%eax
		jle    jump_b8909
		imul   $0xa8,%eax,%edi
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%dl
		mov    EXPORT_SYMBOL(things),%eax
		push   %edx
		mov    0x20(%edi,%eax,1),%edx
		mov    0x1c(%edi,%eax,1),%esi
		mov    0x18(%edi,%eax,1),%ebx
		mov    0x6(%esp),%eax
		sar    $0x8,%edx
		sar    $0x10,%eax
		push   %edx
		mov    %eax,0x8(%esp)
		mov    0x14(%esp),%al
		mov    0x8(%esp),%edx
		mov    %al,%cl
		sar    %cl,%edx
		mov    0xe(%esp),%ecx
		sar    $0x10,%ecx
		sar    $0x5,%esi
		mov    %ecx,0x8(%esp)
		mov    %al,%cl
		mov    0x8(%esp),%eax
		sar    $0x8,%ebx
		sar    %cl,%eax
		mov    %esi,%ecx
		call   ac_unkn_draw_transformed_point
		mov    EXPORT_SYMBOL(things),%ebx
		inc    %ebp
		mov    0x12(%edi,%ebx,1),%bx
		jmp    jump_b8897
	jump_b8909:
		mov    %ebp,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
unused_func_201:	/* 0xb8914 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    %ax,0x10(%esp)
		mov    %bx,0xc(%esp)
		xor    %edx,%edx
		mov    %edx,0x18(%esp)
		mov    0xe(%esp),%edx
		sar    $0x10,%edx
		sar    $0x8,%edx
		mov    %dx,(%esp)
		mov    0xa(%esp),%edx
		mov    $0x7fffffff,%ebx
		sar    $0x10,%edx
		mov    $0xfffffff8,%esi
		sar    $0x8,%edx
		mov    %si,0x14(%esp)
		mov    %dx,0x4(%esp)
		jmp    jump_b895d
	jump_b8958:
		incw   0x14(%esp)
	jump_b895d:
		mov    0x12(%esp),%edx
		sar    $0x10,%edx
		cmp    $0xb,%edx
		jge    jump_b8abe
		movw   $0xfff8,0x8(%esp)
		jmp    jump_b897b
	jump_b8976:
		incw   0x8(%esp)
	jump_b897b:
		mov    0x6(%esp),%edx
		sar    $0x10,%edx
		cmp    $0xb,%edx
		jge    jump_b8958
		mov    -0x2(%esp),%edi
		mov    0x12(%esp),%esi
		sar    $0x10,%edi
		sar    $0x10,%esi
		add    %edi,%esi
		test   %esi,%esi
		jle    jump_b8976
		cmp    $0x80,%esi
		jge    jump_b8976
		mov    0x2(%esp),%edi
		sar    $0x10,%edi
		add    %edi,%edx
		test   %edx,%edx
		jle    jump_b8976
		cmp    $0x80,%edx
		jge    jump_b8976
		shl    $0x7,%edx
		add    %esi,%edx
		imul   $0x12,%edx,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x8(%edx,%esi,1),%ax
		test   %ax,%ax
		je     jump_b8976
	jump_b89d0:
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_b8a46
		imul   $0xa8,%edx,%edx
		mov    EXPORT_SYMBOL(things),%esi
		add    %esi,%edx
		testb  $0x4,0xf(%edx)
		je     jump_b8a42
		test   %cx,%cx
		je     jump_b8a0e
		movswl %cx,%edi
		movzbl 0x9(%edx),%esi
		cmp    %edi,%esi
		je     jump_b8a0e
		cmp    $0xffffffff,%edi
		jne    jump_b8a42
		cmp    $0x3,%esi
		je     jump_b8a0e
		cmp    $0x2,%esi
		jne    jump_b8a42
	jump_b8a0e:
		mov    0x18(%edx),%edi
		mov    0xe(%esp),%esi
		sar    $0x8,%edi
		sar    $0x10,%esi
		sub    %edi,%esi
		mov    %esi,%edi
		imul   %edi,%edi
		mov    0xa(%esp),%ebp
		mov    0x20(%edx),%esi
		sar    $0x10,%ebp
		sar    $0x8,%esi
		sub    %esi,%ebp
		mov    %ebp,%esi
		imul   %ebp,%esi
		add    %edi,%esi
		cmp    %ebx,%esi
		jae    jump_b8a42
		mov    %esi,%ebx
		mov    %eax,0x18(%esp)
	jump_b8a42:
		mov    0x2(%edx),%ax
	jump_b8a46:
		movswl %ax,%edx
		test   %edx,%edx
		jge    jump_b8ab0
		imul   $0x3c,%edx,%esi
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %esi,%edx
		testb  $0x4,0xf(%edx)
		je     jump_b8aac
		test   %cx,%cx
		je     jump_b8a78
		movswl %cx,%esi
		movzbl 0x9(%edx),%edi
		cmp    %esi,%edi
		je     jump_b8a78
		cmp    $0xffffffff,%esi
		jne    jump_b8aac
		cmp    $0x19,%edi
		jne    jump_b8aac
	jump_b8a78:
		mov    0x18(%edx),%edi
		mov    0xe(%esp),%esi
		sar    $0x8,%edi
		sar    $0x10,%esi
		sub    %edi,%esi
		mov    %esi,%edi
		imul   %edi,%edi
		mov    0xa(%esp),%ebp
		mov    0x20(%edx),%esi
		sar    $0x10,%ebp
		sar    $0x8,%esi
		sub    %esi,%ebp
		mov    %ebp,%esi
		imul   %ebp,%esi
		add    %edi,%esi
		cmp    %ebx,%esi
		jae    jump_b8aac
		mov    %esi,%ebx
		mov    %eax,0x18(%esp)
	jump_b8aac:
		mov    0x2(%edx),%ax
	jump_b8ab0:
		test   %ax,%ax
		jne    jump_b89d0
		jmp    jump_b8976
	jump_b8abe:
		mov    0x18(%esp),%eax
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
unused_func_202:	/* 0xb8acc */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3c,%esp
		movswl %cx,%ecx
		movswl %bx,%edi
		movswl %dx,%edx
		movswl %ax,%esi
		mov    %edi,%ebx
		mov    %esi,%eax
		call   unused_func_201
		mov    %eax,%ebx
		mov    %eax,0x38(%esp)
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_alt_at_point
		sar    $0x5,%eax
		movswl %bx,%ebp
		mov    %eax,%edx
		test   %ebp,%ebp
		jle    jump_b8b76
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%al
		push   %eax
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		shl    $0x2,%eax
		add    %ebp,%eax
		shl    $0x3,%eax
		mov    %eax,0x38(%esp)
		mov    0x38(%esp),%ebx
		mov    EXPORT_SYMBOL(things),%eax
		add    %ebx,%eax
		mov    0x20(%eax),%ebx
		sar    $0x8,%ebx
		movswl %dx,%edx
		push   %ebx
		mov    0x1c(%eax),%ebx
		mov    0x18(%eax),%ecx
		sar    $0x5,%ebx
		sar    $0x8,%ecx
		push   %ebx
		mov    %esi,%eax
		mov    %edi,%ebx
		call   ac_func_6fe80
		mov    0x34(%esp),%ecx
		mov    EXPORT_SYMBOL(things),%eax
		add    %ecx,%eax
		mov    0x4e(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %ebp
		push   $aThDIdD
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		mov    EXPORT_SYMBOL(things),%eax
		jmp    jump_b8be7
	jump_b8b76:
		jge    jump_b8c01
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%al
		push   %eax
		mov    %ebp,%eax
		shl    $0x4,%eax
		sub    %ebp,%eax
		shl    $0x2,%eax
		mov    %eax,0x38(%esp)
		mov    0x38(%esp),%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebx,%eax
		mov    0x20(%eax),%ebx
		sar    $0x8,%ebx
		movswl %dx,%edx
		push   %ebx
		mov    0x1c(%eax),%ebx
		mov    0x18(%eax),%ecx
		sar    $0x5,%ebx
		sar    $0x8,%ecx
		push   %ebx
		mov    %esi,%eax
		mov    %edi,%ebx
		call   ac_func_6fe80
		mov    0x34(%esp),%ecx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ecx,%eax
		mov    0x3a(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %ebp
		push   $aThDIdD_0
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		mov    EXPORT_SYMBOL(sthings),%eax
	jump_b8be7:
		add    %ecx,%eax
		lea    0x10(%esp),%ebx
		add    $0x10,%esp
		mov    0x20(%eax),%edx
		mov    0x18(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_draw_text_transformed_at_ground
	jump_b8c01:
		mov    0x38(%esp),%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
unused_func_203:	/* 0xb8c0c */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %al,(%esp)
		movswl %bx,%eax
		test   %eax,%eax
		jle    jump_b8c49
		mov    %eax,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(things),%edx
		shl    $0x3,%eax
		jmp    jump_b8c59
	jump_b8c49:
		mov    %eax,%ebx
		shl    $0x4,%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
	jump_b8c59:
		add    %edx,%eax
		mov    0x18(%eax),%ebx
		mov    0x1c(%eax),%edx
		sar    $0x8,%ebx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		and    $0xff,%ecx
		mov    EXPORT_SYMBOL(colour_lookup)+0x00(%ecx),%cl
		and    $0xff,%ecx
		shl    $0x3,%edx
		movswl %di,%edi
		movswl %si,%esi
		push   %ecx
		mov    0x4(%esp),%cl
		push   %eax
		mov    %esi,%eax
		sar    %cl,%edi
		sar    %cl,%eax
		mov    %edx,%ecx
		mov    %edi,%edx
		call   ac_unkn_draw_transformed_point
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret

/* The debug function which uses this switch was not disassembled.
 * That's a shame. We should re-introduce it.
 */
format_debug_msg_switch_b8d10:
		.long   format_debug_msg_case_b9064
		.long   format_debug_msg_case_b91e9
		.long   format_debug_msg_case_b925e
		.long   format_debug_msg_case_b9299
		.long   format_debug_msg_case_b92db
		.long   format_debug_msg_case_b9444
		.long   format_debug_msg_case_b949d
		.long   format_debug_msg_case_b947f
		.long   format_debug_msg_case_b93ce
		.long   format_debug_msg_case_b9409
		.long   format_debug_msg_case_b92f9
		.long   format_debug_msg_case_b9352
		.long   format_debug_msg_case_b938d
		.long   format_debug_msg_case_b951b
		.long   format_debug_msg_case_b9621
		.long   format_debug_msg_case_b9679
		.long   format_debug_msg_case_b969e
		.long   format_debug_msg_case_b94c2
		.long   format_debug_msg_case_b94fd
		.long   format_debug_msg_case_b9533
		.long   format_debug_msg_case_b903d
		.long   format_debug_msg_case_b96f7
		.long   format_debug_msg_case_b9732
		.long   format_debug_msg_case_b9551
		.long   format_debug_msg_case_b95ab
		.long   format_debug_msg_case_b95c9
		.long   format_debug_msg_case_b96d2
		.long   format_debug_msg_case_b956f
		.long   format_debug_msg_case_b958d
		.long   format_debug_msg_case_b91a2
		.long   format_debug_msg_case_b90d4
		.long   format_debug_msg_case_b91d1
		.long   format_debug_msg_case_b9334
		.long   format_debug_msg_case_b90ae
		.long   format_debug_msg_case_b9100
		.long   format_debug_msg_case_b9173
		.long   format_debug_msg_case_b915b
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_b974a
		.long   format_debug_msg_case_b9885
		.long   format_debug_msg_case_b9919
		.long   format_debug_msg_case_b9785
		.long   format_debug_msg_case_b98aa
		.long   format_debug_msg_case_b9937
		.long   format_debug_msg_case_b97fa
		.long   format_debug_msg_case_b98cf
		.long   format_debug_msg_case_b9955
		.long   format_debug_msg_case_b984a
		.long   format_debug_msg_case_b98f4
		.long   format_debug_msg_case_b9973
		.long   format_debug_msg_case_b99af
		.long   format_debug_msg_case_b99cd
		.long   format_debug_msg_case_b9991
		.long   format_debug_msg_case_b99eb
		.long   format_debug_msg_case_b9a1e
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_b9a54
		.long   format_debug_msg_case_b9b55
		.long   format_debug_msg_case_b9be9
		.long   format_debug_msg_case_b9a8f
		.long   format_debug_msg_case_b9b7a
		.long   format_debug_msg_case_b9c07
		.long   format_debug_msg_case_b9aca
		.long   format_debug_msg_case_b9b9f
		.long   format_debug_msg_case_b9c25
		.long   format_debug_msg_case_b9b1a
		.long   format_debug_msg_case_b9bc4
		.long   format_debug_msg_case_b9c43
		.long   format_debug_msg_case_b9c96
		.long   format_debug_msg_case_b9cb4
		.long   format_debug_msg_case_b9c78
		.long   format_debug_msg_case_b9cd2
		.long   format_debug_msg_case_b9d05
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_ba004
		.long   format_debug_msg_case_b9046
		.long   format_debug_msg_case_b9d42
		.long   format_debug_msg_case_b9e40
		.long   format_debug_msg_case_b9ed1
		.long   format_debug_msg_case_b9d7d
		.long   format_debug_msg_case_b9e65
		.long   format_debug_msg_case_b9eef
		.long   format_debug_msg_case_b9db7
		.long   format_debug_msg_case_b9e89
		.long   format_debug_msg_case_b9f0c
		.long   format_debug_msg_case_b9e06
		.long   format_debug_msg_case_b9ead
		.long   format_debug_msg_case_b9f29
		.long   format_debug_msg_case_b9f7a
		.long   format_debug_msg_case_b9f97
		.long   format_debug_msg_case_b9f5d
		.long   format_debug_msg_case_b9fb4
		.long   format_debug_msg_case_b9fe6
		.long   format_debug_msg_case_b9a3d
		.long   format_debug_msg_case_b9c61
		.long   format_debug_msg_case_b9f46
		.long   format_debug_msg_case_b9118
		.long   format_debug_msg_case_b9144
		.long   format_debug_msg_case_b95e7
		.long   format_debug_msg_case_b9604
		.long   format_debug_msg_case_b9655
		.long   format_debug_msg_case_b918b
		.long   format_debug_msg_case_b9d24
		.long   format_debug_msg_case_b91ba
		.long   format_debug_msg_case_b97c0
		.long   format_debug_msg_case_b9224
		.long   format_debug_msg_case_b92be
		.long   format_debug_msg_case_b9091
		.long   format_debug_msg_case_b902f


/*----------------------------------------------------------------*/
person_command_to_text:	/* 0xb8f48 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %dx,(%esp)
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x1,%eax
		jne    jump_b8f64
		xor    %bl,%al
		jmp    jump_b903f
	jump_b8f64:
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(game_commands),%ecx
		shl    $0x5,%edx
		add    %ecx,%edx
		testb  $0x1,0x18(%edx)
		je     jump_b8f9b
		push   %eax
		push   $aD_53
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esi,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		add    %ecx,%esi
	jump_b8f9b:
		testb  $0x2,0x18(%edx)
		je     jump_b8fc5
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   $ascU
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esi,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		add    %ecx,%esi
	jump_b8fc5:
		testb  $0x4,0x18(%edx)
		je     jump_b8fef
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   $ascIu
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esi,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		add    %ecx,%esi
	jump_b8fef:
		testb  $0x8,0x18(%edx)
		je     jump_b9015
		push   $data_15dd4f
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    %esi,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		add    %ecx,%esi
	jump_b9015:
		mov    0xa(%edx),%al
		sub    $0x2,%al
		cmp    $0x8d,%al
		ja     format_debug_msg_case_ba004
		and    $0xff,%eax
		jmp    *%cs:format_debug_msg_switch_b8d10(,%eax,4)


/*----------------------------------------------------------------*/
format_debug_msg_case_b902f:
/*----------------------------------------------------------------*/
		push   $aIgnoreEnemies
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp


/*----------------------------------------------------------------*/
format_debug_msg_case_b903d:
/*----------------------------------------------------------------*/
		mov    $0x1,%al
	jump_b903f:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9046:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aLoopComD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9064:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aGoToPointXDYDZ,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x14,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9091:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aPlaySampleD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b90ae:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aRunToPointXDZD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b90d4:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aGotopointFaceD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x14,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9100:
/*----------------------------------------------------------------*/
		mov    $aKillEveryone,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9118:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aWithinAreaXDYD
		push   %esi
		call   ac_sprintf
		add    $0x14,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9144:
/*----------------------------------------------------------------*/
		push   $aWithinOff
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b915b:
/*----------------------------------------------------------------*/
		mov    $aExecuteComsPly,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9173:
/*----------------------------------------------------------------*/
		mov    $aGuardOff,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b918b:
/*----------------------------------------------------------------*/
		push   $aHardAsAgent
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b91a2:
/*----------------------------------------------------------------*/
		mov    $aPingExist,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b91ba:
/*----------------------------------------------------------------*/
		push   $aStartDangerMus
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b91d1:
/*----------------------------------------------------------------*/
		mov    $aSelf_destruct,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b91e9:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aGoToPersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9224:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		push   $aCameraTrackD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b925e:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aKillPersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9299:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aKillDMemGroupD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b92be:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntruceGroupD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b92db:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aKillAllGroupD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b92f9:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aFollowPersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9334:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aProtectMemGD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9352:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aSupportPersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b938d:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aProtectPersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b93ce:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aBlockPersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9409:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aScarePersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9444:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aPersuadePerson,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b947f:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aPersuadeAllGD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b949d:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aPersuadeDMemGD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b94c2:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aAvoidPersonD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b94fd:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandAvoidGroup,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b951b:
/*----------------------------------------------------------------*/
		mov    $aHide,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9533:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aDestroyBuildin,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9551:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aCatchTrainD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b956f:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aCatchFerryD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b958d:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aExitFerryD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b95ab:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aOpenDomeD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b95c9:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aCloseDomeD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b95e7:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aLockBuildD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9604:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUnlockBuildD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9621:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x3a(%eax,%edx,4),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aGetItemD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9655:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		mov    weapon_names(,%eax,4),%edx
		push   %edx
		push   $aSelectWeaponS
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9679:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		mov    weapon_names(,%eax,4),%ecx
		push   %ecx
		mov    $aUseWeaponS,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b969e:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x3a(%eax,%edx,4),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aDropSpecItemD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b96d2:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		mov    weapon_names(,%eax,4),%ebx
		push   %ebx
		mov    $aDropWeaponS,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b96f7:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aUseVehicleD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9732:
/*----------------------------------------------------------------*/
		mov    $aExitVehicle,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b974a:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWaitPVDeadD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9785:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWaitPVINearD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b97c0:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		push   $aPingPVD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b97fa:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWaitPVIArrives,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x18,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b984a:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWaitPPersuaded,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9885:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitDMemGDeadD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b98aa:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitDMemGDNear,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b98cf:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitDMemGArriv,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b98f4:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitDMemGPersu,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9919:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitAllGDeadD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9937:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitAllGDNear,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9955:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitAllGArrive,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9973:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitAllGPersua,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9991:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitMissionSta,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b99af:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitMissionSuc,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b99cd:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitMissionFai,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b99eb:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitObjectDest,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x18,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9a1e:
/*----------------------------------------------------------------*/
		mov    0x10(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWaitTimeD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9a3d:
/*----------------------------------------------------------------*/
		push   $aWaitObj
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9a54:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWandPVDeadD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9a8f:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWandPVINearD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9aca:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWandPVIArrives,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x18,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9b1a:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aWandPPersuaded,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9b55:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandDMemGDDead,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9b7a:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandDMemGDNear,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9b9f:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandDMemGArriv,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9bc4:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandDMemGPersu,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9be9:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandAllGDeadD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9c07:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandAllGDNear,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9c25:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandAllGArrive,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9c43:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandAllGPersua,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9c61:
/*----------------------------------------------------------------*/
		push   $aWandObj
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9c78:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandMissionSta,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9c96:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandMissionSuc,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9cb4:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandMissionFai,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9cd2:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandObjectDest,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x18,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9d05:
/*----------------------------------------------------------------*/
		mov    0x10(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aWandTimeD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9d24:
/*----------------------------------------------------------------*/
		mov    0x10(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilGDNotSeen
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9d42:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		mov    $aUntilPVDeadD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9d7d:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		push   $aUntilPVINearD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9db7:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		push   $aUntilPVIArrive
		push   %esi
		call   ac_sprintf
		add    $0x18,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9e06:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(things),%eax
		mov    0x4e(%eax,%edx,8),%ax
		and    $0xffff,%eax
		push   %eax
		push   $aUntilPPersuade
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9e40:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aUntilDMemGDead,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9e65:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilDMemGDNea
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9e89:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilDMemGArri
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9ead:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilDMemGPers
		push   %esi
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9ed1:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    $aUntilAllGDeadD,%eax
		push   %eax
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9eef:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilAllGDNear
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9f0c:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilAllGArriv
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9f29:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilAllGPersu
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9f46:
/*----------------------------------------------------------------*/
		push   $aUntilObj
		push   %esi
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9f5d:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilMissionSt
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9f7a:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilMissionSu
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9f97:
/*----------------------------------------------------------------*/
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilMissionFa
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9fb4:
/*----------------------------------------------------------------*/
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    (%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilObjectDes
		push   %esi
		call   ac_sprintf
		add    $0x18,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_b9fe6:
/*----------------------------------------------------------------*/
		mov    0x10(%edx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aUntilTimeD
		push   %esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
format_debug_msg_case_ba004:
/*----------------------------------------------------------------*/
		xor    %al,%al
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret

/*----------------------------------------------------------------*/
unused_func_204:	/* 0xba010 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%edi
		mov    %dx,0x18(%esp)
		mov    %ecx,%ebp
		movswl %bx,%eax
		mov    EXPORT_SYMBOL(game_commands),%esi
		shl    $0x5,%eax
		add    %eax,%esi
		mov    0xa(%esi),%al
		mov    %al,%ah
		cmp    $0x36,%al
		jb     jump_ba5e3
		jbe    jump_ba2e8
		cmp    $0x6f,%al
		jb     jump_ba535
		jbe    jump_ba2c3
		cmp    $0x7e,%al
		jb     jump_ba503
		jbe    jump_ba2c3
		cmp    $0x8b,%al
		jb     jump_ba4f2
		jbe    jump_ba2c3
		cmp    $0x8c,%al
		jbe    jump_ba6ae
		cmp    $0x8d,%al
		jne    jump_ba6db
	jump_ba07a:
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_ba09c
		mov    0x16(%esp),%edx
		movswl %di,%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		call   unused_func_200
	jump_ba09c:
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba0a8:
		mov    0x18(%esp),%eax
		mov    %ax,(%esp)
		mov    0x4(%esi),%ax
		mov    $0x2,%ch
		mov    %ax,0x1c(%esp)
		xor    %eax,%eax
		mov    0x6(%esi),%bx
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		mov    0x8(%esi),%dx
		cmp    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %al,%cl
		xor    %eax,%eax
		mov    %ch,%al
		mov    EXPORT_SYMBOL(colour_lookup)+0x00(%eax),%al
		and    $0xff,%eax
		movswl %bx,%ebp
		movswl %di,%edi
		mov    0x1a(%esp),%ebx
		push   %eax
		movswl %dx,%eax
		sar    $0x10,%ebx
		mov    0x2(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		mov    %edi,%eax
		sar    %cl,%edx
		sar    %cl,%eax
		mov    %ebp,%ecx
		call   ac_unkn_draw_transformed_point
	jump_ba10d:
		push   $0x2
		mov    0xe(%esi),%ax
		mov    0x6(%esi),%ebx
		mov    0x4(%esi),%edx
		xor    %ecx,%ecx
		shl    $0x6,%eax
		sar    $0x10,%ebx
		mov    %ax,%cx
		mov    0x2(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_func_711F4
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba13e:
		mov    0x4(%esi),%ax
		mov    $0x2,%dl
		mov    %ax,0xc(%esp)
		mov    0x6(%esi),%ax
		mov    %di,0x8(%esp)
		mov    %ax,0x24(%esp)
		xor    %eax,%eax
		mov    0x8(%esi),%bx
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		mov    0x18(%esp),%edi
		cmp    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %al,%cl
		xor    %eax,%eax
		mov    %dl,%al
		mov    EXPORT_SYMBOL(colour_lookup)+0x00(%eax),%al
		mov    0x22(%esp),%edx
		and    $0xff,%eax
		movswl %di,%ebp
		push   %eax
		sar    $0x10,%edx
		movswl %bx,%eax
		sar    %cl,%ebp
		push   %eax
		mov    0xe(%esp),%eax
		mov    0x12(%esp),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		sar    %cl,%eax
		mov    %edx,%ecx
		mov    %ebp,%edx
		call   ac_unkn_draw_transformed_point
		testb  $0x10,0x18(%esi)
		je     jump_ba10d
		push   $0x2
		mov    0x10(%esi),%eax
		mov    0x6(%esi),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    0xc(%esi),%ecx
		sub    %ebx,%eax
		mov    0x4(%esi),%edx
		push   %eax
		mov    0x2(%esi),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %eax,%ecx
		call   ac_func_705bc
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba1ed:
		mov    $0x1,%ecx
		mov    0x16(%esp),%edx
		mov    (%esi),%ebx
		movswl %di,%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   unused_func_203
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba212:
		mov    $0x4,%ecx
		mov    0x16(%esp),%edx
		mov    (%esi),%ebx
		movswl %di,%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   unused_func_203
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba237:
		mov    0x16(%esp),%edx
		mov    $0x5,%ecx
		mov    (%esi),%ebx
		movswl %di,%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   unused_func_203
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba25c:
		mov    $0x2,%ch
		mov    %di,0x14(%esp)
		xor    %eax,%eax
		mov    0x4(%esi),%bx
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		mov    %edx,%edi
		mov    0x6(%esi),%dx
		mov    0x8(%esi),%si
		cmp    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %al,%cl
		xor    %eax,%eax
		mov    %ch,%al
		mov    EXPORT_SYMBOL(colour_lookup)+0x00(%eax),%al
		and    $0xff,%eax
		movswl %dx,%edx
		push   %eax
		movswl %si,%eax
		movswl %bx,%ebx
		push   %eax
		mov    0x1a(%esp),%eax
		movswl %di,%esi
		sar    $0x10,%eax
		sar    %cl,%esi
		sar    %cl,%eax
		mov    %edx,%ecx
		mov    %esi,%edx
		call   ac_unkn_draw_transformed_point
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba2c3:
		mov    0x16(%esp),%edx
		mov    $0x1,%ecx
		mov    (%esi),%ebx
		movswl %di,%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   unused_func_203
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba2e8:
		mov    0x16(%esp),%edx
		mov    $0x1,%ecx
		mov    (%esi),%ebx
		movswl %di,%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   unused_func_203
		mov    0xe(%esi),%ax
		xor    %ecx,%ecx
		shl    $0x6,%eax
		mov    %ax,%cx
		mov    0x20(%ebp),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%ebp),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebp),%eax
		sar    $0x8,%eax
		push   $0x2
		cwtl
		call   ac_func_711F4
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba339:
		mov    0x16(%esp),%edx
		mov    $0x1,%ecx
		mov    (%esi),%ebx
		movswl %di,%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		mov    %di,0x10(%esp)
		call   unused_func_203
		mov    0x18(%esp),%eax
		mov    $0x2,%dl
		mov    0x4(%esi),%di
		mov    %ax,0x20(%esp)
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		mov    0x8(%esi),%bx
		cmp    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %al,0x2c(%esp)
		xor    %eax,%eax
		mov    %dl,%al
		mov    EXPORT_SYMBOL(colour_lookup)+0x00(%eax),%al
		mov    0x1e(%esp),%ebp
		and    $0xff,%eax
		movswl %cx,%edx
		mov    0x2c(%esp),%cl
		push   %eax
		movswl %bx,%eax
		sar    $0x10,%ebp
		push   %eax
		mov    0x16(%esp),%eax
		sar    %cl,%ebp
		sar    $0x10,%eax
		movswl %di,%ebx
		sar    %cl,%eax
		mov    %edx,%ecx
		mov    %ebp,%edx
		call   ac_unkn_draw_transformed_point
		testb  $0x10,0x18(%esi)
		je     jump_ba10d
		push   $0x2
		mov    0x10(%esi),%eax
		mov    0x6(%esi),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    0xc(%esi),%ecx
		sub    %ebx,%eax
		mov    0x4(%esi),%edx
		push   %eax
		mov    0x2(%esi),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %eax,%ecx
		call   ac_func_705bc
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba3fe:
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_ba41c
		mov    0x16(%esp),%edx
		movswl %di,%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		call   unused_func_200
	jump_ba41c:
		mov    0x18(%esp),%ecx
		mov    $0x2,%dh
		mov    0x8(%esi),%ax
		mov    %di,0x4(%esp)
		mov    %ax,0x28(%esp)
		xor    %eax,%eax
		mov    0x6(%esi),%bx
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		mov    0x4(%esi),%di
		cmp    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %al,%dl
		xor    %eax,%eax
		mov    %dh,%al
		mov    EXPORT_SYMBOL(colour_lookup)+0x00(%eax),%al
		and    $0xff,%eax
		movswl %bx,%ebp
		push   %eax
		movswl %di,%ebx
		mov    0x2a(%esp),%eax
		movswl %cx,%edi
		sar    $0x10,%eax
		mov    %dl,%cl
		push   %eax
		mov    0xa(%esp),%eax
		mov    %edi,%edx
		sar    $0x10,%eax
		sar    %cl,%edx
		sar    %cl,%eax
		mov    %ebp,%ecx
		call   ac_unkn_draw_transformed_point
		testb  $0x10,0x18(%esi)
		je     jump_ba10d
		push   $0x2
		mov    0x10(%esi),%eax
		mov    0x6(%esi),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    0xc(%esi),%ecx
		sub    %ebx,%eax
		mov    0x4(%esi),%edx
		push   %eax
		mov    0x2(%esi),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %eax,%ecx
		call   ac_func_705bc
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba4c4:
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_ba09c
		mov    0x16(%esp),%edx
		movswl %di,%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		call   unused_func_200
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba4f2:
		cmp    $0x83,%al
		je     jump_ba13e
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba503:
		cmp    $0x73,%al
		jb     jump_ba524
		cmp    $0x74,%al
		jbe    jump_ba56a
		cmp    $0x75,%al
		jbe    jump_ba339
		cmp    $0x77,%al
		jbe    jump_ba3fe
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba524:
		cmp    $0x72,%al
		je     jump_ba2e8
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba535:
		cmp    $0x49,%al
		jb     jump_ba5c0
		jbe    jump_ba4c4
		cmp    $0x4d,%al
		jb     jump_ba562
		jbe    jump_ba339
		cmp    $0x4f,%al
		jbe    jump_ba3fe
		cmp    $0x56,%al
		je     jump_ba2c3
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba562:
		cmp    $0x4b,%al
		jb     jump_ba6db
	jump_ba56a:
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_ba588
		mov    0x16(%esp),%edx
		movswl %di,%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		call   unused_func_200
	jump_ba588:
		mov    0xe(%esi),%ax
		xor    %ecx,%ecx
		shl    $0x6,%eax
		mov    %ax,%cx
		mov    0x20(%ebp),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%ebp),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebp),%eax
		sar    $0x8,%eax
		push   $0x2
		cwtl
		call   ac_func_711F4
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba5c0:
		cmp    $0x39,%al
		jb     jump_ba56a
		jbe    jump_ba339
		cmp    $0x3b,%al
		jbe    jump_ba3fe
		cmp    $0x42,%al
		je     jump_ba2c3
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba5e3:
		cmp    $0x10,%al
		jb     jump_ba664
		jbe    jump_ba237
		cmp    $0x22,%al
		jb     jump_ba628
		jbe    jump_ba4c4
		cmp    $0x24,%al
		jb     jump_ba0a8
		jbe    jump_ba13e
		cmp    $0x33,%al
		jb     jump_ba6db
		jbe    jump_ba2c3
		cmp    $0x35,%al
		je     jump_ba4c4
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba628:
		cmp    $0x17,%al
		jb     jump_ba653
		jbe    jump_ba1ed
		cmp    $0x1d,%al
		jb     jump_ba6db
		cmp    $0x1e,%al
		jbe    jump_ba41c
		cmp    $0x20,%al
		je     jump_ba0a8
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba653:
		cmp    $0x11,%al
		je     jump_ba25c
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba664:
		cmp    $0x5,%al
		jb     jump_ba6a4
		cmp    $0x6,%al
		jbe    jump_ba07a
		cmp    $0xa,%al
		jb     jump_ba693
		jbe    jump_ba212
		cmp    $0xb,%al
		jbe    jump_ba212
		cmp    $0xe,%al
		jbe    jump_ba1ed
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba693:
		cmp    $0x7,%al
		je     jump_ba237
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba6a4:
		cmp    $0x3,%al
		jb     jump_ba6d3
		jbe    jump_ba1ed
	jump_ba6ae:
		mov    0x16(%esp),%edx
		mov    $0x2,%ecx
		mov    (%esi),%ebx
		movswl %di,%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   unused_func_203
		mov    $0x1,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_ba6d3:
		cmp    $0x2,%al
		je     jump_ba0a8
	jump_ba6db:
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
unused_func_205:	/* 0xba6e4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x58,%esp
		movl   $0xffffffff,0x38(%esp)
		xor    %edx,%edx
		mov    0x68(%esp),%dx
		lea    0x0(,%edx,4),%eax
		mov    $0x190,%edi
		add    %edx,%eax
		mov    $0xc8,%ebx
		shl    $0x2,%eax
		mov    $0x96,%ecx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(things),%ebp
		shl    $0x3,%eax
		mov    %bx,0x40(%esp)
		add    %eax,%ebp
		mov    %cx,0x44(%esp)
		mov    $0x64,%edx
		mov    0x52(%ebp),%ax
		mov    %dx,0x3c(%esp)
		mov    %eax,0x50(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		je     jump_ba74f
		mov    %dx,0x40(%esp)
	jump_ba74f:
		mov    %edi,%eax
		mov    0x3c(%esp),%esi
		add    $0x8,%eax
		xor    %edx,%edx
		mov    %ax,0x4c(%esp)
		mov    0x50(%esp),%eax
		add    $0x4,%esi
		test   %ax,%ax
		je     jump_ba781
		mov    EXPORT_SYMBOL(game_commands),%ebx
	jump_ba773:
		cwtl
		shl    $0x5,%eax
		mov    (%ebx,%eax,1),%ax
		inc    %edx
		test   %ax,%ax
		jne    jump_ba773
	jump_ba781:
		xor    %eax,%eax
		mov    %dx,%ax
		test   %eax,%eax
		je     jump_bac44
		mov    0x42(%esp),%ebx
		shl    $0x4,%eax
		sar    $0x10,%ebx
		add    $0x8,%eax
		cmp    %ebx,%eax
		jge    jump_ba7ae
		mov    %edx,%eax
		shl    $0x4,%eax
		add    $0x8,%eax
		mov    %ax,0x44(%esp)
	jump_ba7ae:
		mov    data_1dc79e,%ebx
		mov    data_1dc7a0,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		sar    $0x2,%ebx
		sub    $0x4,%eax
		cmp    %eax,%ebx
		jle    jump_ba7d2
		xor    %ecx,%ecx
		mov    %cx,data_1dc7a0
	jump_ba7d2:
		mov    $0x4,%eax
		mov    %dx,data_1dc7a2
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+0x60
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_ba81a
		mov    0x42(%esp),%ecx
		mov    0x3e(%esp),%ebx
		xor    %eax,%eax
		mov    0x3a(%esp),%edx
		mov    0x74(%esp),%al
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		push   %eax
		sar    %ecx
		sar    %ebx
		movswl %di,%eax
		sar    %edx
		sar    %eax
		jmp    jump_ba839
	jump_ba81a:
		mov    0x42(%esp),%ecx
		mov    0x3e(%esp),%ebx
		xor    %eax,%eax
		mov    0x3a(%esp),%edx
		mov    0x74(%esp),%al
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		push   %eax
		movswl %di,%eax
	jump_ba839:
		call   ac_LbDrawBox
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+0x60
		mov    0x42(%esp),%ecx
		mov    0x3e(%esp),%ebx
		mov    0x3a(%esp),%edx
		xor    %eax,%eax
		movswl %di,%edi
		mov    0x6c(%esp),%al
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		push   %eax
		sar    $0x10,%edx
		mov    %edi,%eax
		call   draw_unkn_func_07
		mov    data_1dc79e,%eax
		sar    $0x10,%eax
		sar    $0x2,%eax
		mov    0x50(%esp),%edi
		mov    %eax,0x48(%esp)
		test   %di,%di
		je     jump_ba8aa
	jump_ba885:
		cmpw   $0x0,0x48(%esp)
		je     jump_ba8aa
		mov    0x48(%esp),%ecx
		movswl %di,%edx
		mov    EXPORT_SYMBOL(game_commands),%eax
		shl    $0x5,%edx
		dec    %ecx
		mov    (%edx,%eax,1),%di
		mov    %ecx,0x48(%esp)
		test   %di,%di
		jne    jump_ba885
	jump_ba8aa:
		mov    data_1dc7a0,%ax
		xor    %ah,%ah
		and    $0x3,%al
		mov    $0x1,%ebx
		shl    $0x2,%eax
		xor    %edx,%edx
		sub    %eax,%esi
		xor    %eax,%eax
		call   person_command_to_text
		test   %di,%di
		je     jump_baba9
		mov    0x4c(%esp),%eax
		sub    $0x14,%eax
		mov    %ax,0x54(%esp)
	jump_ba8dc:
		cmp    0x3c(%esp),%si
		jle    jump_bab84
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_ba8fd
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
		add    %eax,%eax
		jmp    jump_ba902
	jump_ba8fd:
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
	jump_ba902:
		mov    0x4a(%esp),%edx
		sar    $0x10,%edx
		cmp    %edx,%eax
		jl     jump_ba9fb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_ba927
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
		add    %eax,%eax
		jmp    jump_ba92c
	jump_ba927:
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
	jump_ba92c:
		mov    0x4a(%esp),%ebx
		mov    0x3e(%esp),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		add    %ebx,%edx
		cmp    %edx,%eax
		jg     jump_ba9fb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_ba95a
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
		add    %eax,%eax
		jmp    jump_ba95f
	jump_ba95a:
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
	jump_ba95f:
		movswl %si,%edx
		cmp    %edx,%eax
		jl     jump_ba9fb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_ba981
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%edx
		add    %edx,%edx
		jmp    jump_ba987
	jump_ba981:
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%edx
	jump_ba987:
		movswl %si,%eax
		lea    0xf(%eax),%ebx
		cmp    %ebx,%edx
		jg     jump_ba9fb
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%dx
		sub    $0x2,%eax
		cmp    $0x1,%edx
		jne    jump_ba9cc
		mov    0x3e(%esp),%ebx
		xor    %edx,%edx
		mov    $0x7,%ecx
		mov    0x6c(%esp),%dl
		sar    $0x10,%ebx
		push   %edx
		mov    %eax,%edx
		mov    0x4e(%esp),%eax
		sub    $0x8,%ebx
		sar    $0x10,%eax
		sar    %ebx
		sub    $0x4,%eax
		sar    %edx
		sar    %eax
		jmp    jump_ba9f6
	jump_ba9cc:
		xor    %edx,%edx
		mov    0x6c(%esp),%dl
		mov    0x3e(%esp),%ebx
		push   %edx
		mov    0x4e(%esp),%edx
		mov    $0xf,%ecx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		sub    $0x4,%edx
		sub    $0x8,%ebx
		mov    %edx,0x38(%esp)
		mov    %eax,%edx
		mov    0x38(%esp),%eax
	jump_ba9f6:
		call   ac_LbDrawBox
	jump_ba9fb:
		test   %ebp,%ebp
		je     jump_baa78
		xor    %edx,%edx
		movswl %di,%eax
		mov    0x54(%ebp),%dx
		cmp    %eax,%edx
		jne    jump_baa78
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_baa4c
		mov    0x3e(%esp),%ebx
		mov    $0x7,%ecx
		xor    %eax,%eax
		movswl %si,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		sar    $0x10,%ebx
		sub    $0x2,%edx
		push   %eax
		mov    0x4e(%esp),%eax
		sub    $0x8,%ebx
		sar    $0x10,%eax
		sar    %edx
		sub    $0x4,%eax
		sar    %ebx
		sar    %eax
		jmp    jump_baa73
	jump_baa4c:
		mov    0x3e(%esp),%ebx
		mov    $0xf,%ecx
		xor    %eax,%eax
		movswl %si,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		sar    $0x10,%ebx
		push   %eax
		mov    0x4e(%esp),%eax
		sub    $0x2,%edx
		sar    $0x10,%eax
		sub    $0x8,%ebx
		sub    $0x4,%eax
	jump_baa73:
		call   ac_LbDrawBox
	jump_baa78:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_baa8e
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
		add    %eax,%eax
		jmp    jump_baa93
	jump_baa8e:
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
	jump_baa93:
		mov    0x4a(%esp),%edx
		sar    $0x10,%edx
		cmp    %edx,%eax
		jl     jump_bab1f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_baab8
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
		add    %eax,%eax
		jmp    jump_baabd
	jump_baab8:
		mov    EXPORT_SYMBOL(lbDisplay)+0x50,%eax
	jump_baabd:
		mov    0x4a(%esp),%ebx
		mov    0x3e(%esp),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		add    %ebx,%edx
		cmp    %edx,%eax
		jg     jump_bab1f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_baae7
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
		add    %eax,%eax
		jmp    jump_baaec
	jump_baae7:
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
	jump_baaec:
		movswl %si,%edx
		cmp    %edx,%eax
		jl     jump_bab1f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_bab09
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
		add    %eax,%eax
		jmp    jump_bab0e
	jump_bab09:
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
	jump_bab0e:
		movswl %si,%edx
		add    $0xf,%edx
		cmp    %edx,%eax
		jg     jump_bab1f
		movswl %di,%eax
		mov    %eax,0x38(%esp)
	jump_bab1f:
		test   %ebp,%ebp
		je     jump_bab3e
		mov    %esi,%eax
		add    $0x5,%eax
		movswl %di,%ebx
		movswl %ax,%edx
		mov    0x52(%esp),%eax
		mov    %ebp,%ecx
		sar    $0x10,%eax
		call   unused_func_204
	jump_bab3e:
		mov    %esp,%eax
		movswl %di,%edx
		xor    %ebx,%ebx
		call   person_command_to_text
		test   %al,%al
		je     jump_bab67
		mov    0x4a(%esp),%eax
		mov    %esp,%ebx
		xor    %ecx,%ecx
		movswl %si,%edx
		mov    0x70(%esp),%cl
		sar    $0x10,%eax
		call   ac_draw_text
		jmp    jump_bab6a
	jump_bab67:
		sub    $0x10,%esi
	jump_bab6a:
		mov    0x3a(%esp),%edx
		mov    0x42(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %eax,%edx
		movswl %si,%eax
		add    $0x1c,%eax
		cmp    %edx,%eax
		jg     jump_baba9
	jump_bab84:
		mov    0x48(%esp),%ebx
		mov    EXPORT_SYMBOL(game_commands),%edx
		movswl %di,%eax
		add    $0x10,%esi
		shl    $0x5,%eax
		inc    %ebx
		mov    (%edx,%eax,1),%di
		mov    %ebx,0x48(%esp)
		test   %di,%di
		jne    jump_ba8dc
	jump_baba9:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_babbf
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
		add    %eax,%eax
		jmp    jump_babc4
	jump_babbf:
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%eax
	jump_babc4:
		mov    0x3a(%esp),%edx
		sar    $0x10,%edx
		sub    $0x14,%edx
		cmp    %edx,%eax
		jge    jump_babe5
		mov    data_1dc79e,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_babe5
		decw   data_1dc7a0
	jump_babe5:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x64,%ax
		cmp    $0x1,%eax
		jne    jump_babfc
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%edx
		add    %edx,%edx
		jmp    jump_bac02
	jump_babfc:
		mov    EXPORT_SYMBOL(lbDisplay)+0x54,%edx
	jump_bac02:
		mov    0x3a(%esp),%ebx
		mov    0x42(%esp),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		add    %eax,%ebx
		add    $0xa,%ebx
		cmp    %ebx,%edx
		jle    jump_bac40
		mov    %eax,%edx
		mov    data_1dc7a0,%eax
		sar    $0x4,%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    data_1dc79e,%eax
		sar    $0x10,%eax
		sar    $0x2,%eax
		cmp    %edx,%eax
		jge    jump_bac40
		incw   data_1dc7a0
	jump_bac40:
		mov    0x38(%esp),%eax
	jump_bac44:
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unused_func_022)	/* 0xbac50 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x68,%esp
		mov    $0xffffffff,%ecx
		mov    EXPORT_SYMBOL(mouse_map_z)-2,%ebx
		mov    EXPORT_SYMBOL(mouse_map_x)-2,%eax
		xor    %edx,%edx
		sar    $0x10,%ebx
		sar    $0x10,%eax
		call   unused_func_202
		mov    %eax,%edx
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x11
		je     jump_bacaa
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+0x11
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_bac9c
		xor    %ebx,%ebx
		mov    %ebx,data_1dc7a4
		jmp    jump_bacaa
	jump_bac9c:
		and    $0xffff,%eax
		test   %eax,%eax
		jle    jump_bacaa
		mov    %eax,data_1dc7a4
	jump_bacaa:
		cmpl   $0x0,data_1dc7a4
		je     jump_bacba
		mov    data_1dc7a4,%dx
	jump_bacba:
		xor    %esi,%esi
		mov    %dx,%si
		test   %esi,%esi
		jle    jump_bb3c7
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbShift),%al
		cmp    $0x1,%eax
		je     jump_bb3c7
		cmp    $0x3e8,%esi
		jge    jump_bb3c7
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		shl    $0x2,%ebx
		add    %esi,%ebx
		mov    EXPORT_SYMBOL(things),%eax
		shl    $0x3,%ebx
		add    %ebx,%eax
		mov    %eax,EXPORT_SYMBOL(p_track_thing)
		mov    %eax,EXPORT_SYMBOL(p_track2_thing)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%al
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		push   %eax
		mov    0x20(%ebx),%eax
		sar    $0x8,%eax
		mov    EXPORT_SYMBOL(mouse_map_y),%edx
		push   %eax
		mov    0x1c(%ebx),%eax
		mov    0x18(%ebx),%ecx
		sar    $0x5,%eax
		sar    $0x8,%ecx
		push   %eax
		mov    EXPORT_SYMBOL(mouse_map_z),%ebx
		mov    EXPORT_SYMBOL(mouse_map_x),%eax
		call   ac_func_6fe80
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		mov    0x9(%eax),%al
		and    $0xff,%eax
		cmp    $0x3,%eax
		jne    jump_bad81
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%al
		push   %eax
		mov    $0x96,%ecx
		mov    $0x118,%ebx
		push   %esi
		mov    $0x50,%edx
		mov    $0x164,%eax
		call   unused_func_205
	jump_bad81:
		cmpb   $0x0,EXPORT_SYMBOL(execute_commands)
		je     jump_bb3c7
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		push   %eax
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x51(%ebx),%al
		push   %eax
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x50(%ebx),%al
		push   %eax
		mov    0x70(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		mov    person_st_text(,%eax,4),%esi
		push   %esi
		push   %eax
		push   $aStateDSMoodDGD
		lea    0x24(%esp),%eax
		mov    $0x1e,%edx
		push   %eax
		xor    %ecx,%ecx
		lea    0x28(%esp),%ebx
		call   ac_sprintf
		add    $0x28,%esp
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		mov    %edx,%eax
		call   ac_draw_text
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		xor    %eax,%eax
		mov    0x24(%ebx),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x26(%ebx),%ax
		push   %eax
		mov    0x8e(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x80(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x7e(%ebx),%ax
		push   %eax
		mov    0x38(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x6c(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x36(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xc(%ebx),%edi
		push   %edi
		push   $aF08xSpdDOfDHeD
		lea    0x28(%esp),%eax
		mov    $0x2d,%edx
		push   %eax
		xor    %ecx,%ecx
		lea    0x2c(%esp),%ebx
		call   ac_sprintf
		add    $0x2c,%esp
		mov    $0x1e,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		mov    0x4a(%ebx),%esi
		sar    $0x10,%esi
		lea    0x0(,%esi,4),%ecx
		add    %esi,%ecx
		shl    $0x2,%ecx
		xor    %edx,%edx
		sub    %esi,%ecx
		xor    %eax,%eax
		mov    0x3e(%ebx),%dl
		mov    EXPORT_SYMBOL(my_paths)(%ecx),%al
		sub    %edx,%eax
		push   %eax
		mov    0x56(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x8a(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x94(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0xa4(%ebx),%ebp
		xor    %eax,%eax
		push   %ebp
		mov    0x99(%ebx),%al
		push   %eax
		xor    %eax,%eax
		mov    0x80(%ebx),%al
		push   %eax
		mov    0x44(%ebx),%eax
		push   %eax
		push   $aF208xF3XCwDWcX
		lea    0x24(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x28,%esp
		mov    %esp,%ebx
		mov    $0x3c,%edx
		xor    %ecx,%ecx
		mov    $0x1e,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		mov    0x46(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x40(%ebx),%edx
		mov    0x8c(%ebx),%eax
		push   %edx
		sar    $0x10,%eax
		push   %eax
		push   $aTarg2DPtargXGo
		lea    0x10(%esp),%eax
		xor    %ecx,%ecx
		push   %eax
		lea    0x14(%esp),%ebx
		mov    $0x4b,%edx
		call   ac_sprintf
		add    $0x14,%esp
		mov    $0x1e,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x4,0xe(%eax)
		je     jump_baf65
		mov    $ascDa,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x1e,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
	jump_baf65:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x1,0xe(%eax)
		je     jump_baf8c
		mov    $ascRe,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x32,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
	jump_baf8c:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x2,0xe(%eax)
		je     jump_bafb3
		mov    $ascSi,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x46,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
	jump_bafb3:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x2,0xc(%eax)
		je     jump_bafd7
		mov    $ascDe,%ebx
		xor    %ecx,%ecx
		mov    $0x5a,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		mov    %edx,%eax
		call   ac_draw_text
	jump_bafd7:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x4,0xd(%eax)
		je     jump_baffe
		mov    $ascCh,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x6e,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
	jump_baffe:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x40,0xc(%eax)
		je     jump_bb025
		mov    $ascCi,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x82,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
	jump_bb025:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x20,0xf(%eax)
		je     jump_bb04c
		mov    $ascSap,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x96,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
	jump_bb04c:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x2,0xd(%eax)
		je     jump_bb073
		mov    $ascSta,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0xbe,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+2,%cl
		call   ac_draw_text
	jump_bb073:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		testb  $0x8,0xd(%eax)
		je     jump_bb09e
		mov    $ascTrig,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x104,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
	jump_bb09e:
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		mov    0x9(%ebx),%al
		cmp    $0x2,%al
		jb     jump_bb10d
		jbe    jump_bb0ef
		cmp    $0x3,%al
		jne    jump_bb10d
		mov    0x34(%ebx),%ecx
		push   %ecx
		mov    0x2c(%ebx),%esi
		xor    %eax,%eax
		push   %esi
		mov    0x64(%ebx),%ax
		push   %eax
		push   $aPersonLastdist
		lea    0x10(%esp),%eax
		mov    $0x5a,%edx
		push   %eax
		lea    0x14(%esp),%ebx
		xor    %ecx,%ecx
		call   ac_sprintf
		add    $0x14,%esp
		mov    $0x168,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+3,%cl
		call   ac_draw_text
		jmp    jump_bb148
	jump_bb0ef:
		mov    $aVehicle,%ebx
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		mov    $0x168,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+2,%cl
		call   ac_draw_text
		jmp    jump_bb148
	jump_bb10d:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		mov    0x9(%eax),%al
		and    $0xff,%eax
		push   %eax
		push   $aTypeD
		lea    0x8(%esp),%eax
		lea    0x8(%esp),%ebx
		push   %eax
		mov    $0x5a,%edx
		xor    %ecx,%ecx
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x168,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+7,%cl
		call   ac_draw_text
	jump_bb148:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		mov    0x70(%eax),%ax
		mov    %eax,%edx
		shr    $0xc,%dx
		and    $0xffff,%edx
		push   %edx
		mov    %eax,%edx
		shl    $0x4,%edx
		shr    $0xd,%dx
		and    $0xffff,%edx
		push   %edx
		mov    %eax,%edx
		shl    $0xa,%edx
		shr    $0xd,%dx
		and    $0xffff,%edx
		push   %edx
		mov    %eax,%edx
		xor    %ah,%dh
		and    $0x7,%dl
		and    $0xffff,%edx
		shl    $0x7,%eax
		push   %edx
		shr    $0xd,%ax
		and    $0xffff,%eax
		push   %eax
		push   $aBDLDADBrDSkD
		lea    0x18(%esp),%eax
		lea    0x18(%esp),%ebx
		push   %eax
		mov    $0x69,%edx
		xor    %ecx,%ecx
		call   ac_sprintf
		add    $0x1c,%esp
		mov    $0x1e,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		xor    %eax,%eax
		mov    0x5d(%ebx),%al
		push   %eax
		xor    %eax,%eax
		mov    0x7d(%ebx),%al
		push   %eax
		mov    0x64(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x66(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x26(%ebx),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aT1DT2DCtDRtDBc
		lea    0x18(%esp),%eax
		mov    $0x78,%edx
		push   %eax
		xor    %ecx,%ecx
		lea    0x1c(%esp),%ebx
		call   ac_sprintf
		add    $0x1c,%esp
		mov    $0x1e,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		mov    0x4c(%eax),%dx
		test   %dx,%dx
		je     jump_bb2cb
		mov    $0x8c,%ebx
		mov    %edx,%eax
		mov    %bx,0x64(%esp)
		je     jump_bb2cb
	jump_bb23e:
		xor    %ebx,%ebx
		mov    %ax,%bx
		imul   $0x13,%ebx,%edi
		mov    EXPORT_SYMBOL(my_paths)+0x07(%edi),%ecx
		sar    $0x10,%ecx
		sar    $0x8,%ecx
		push   %ecx
		mov    EXPORT_SYMBOL(my_paths)-0x01(%edi),%ecx
		sar    $0x10,%ecx
		sar    $0x8,%ecx
		push   %ecx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(my_paths)(%edi),%cl
		push   %ecx
		push   %ebx
		push   $aNDFDXDZD
		lea    0x14(%esp),%ebx
		push   %ebx
		xor    %ecx,%ecx
		call   ac_sprintf
		add    $0x18,%esp
		mov    %esp,%ebx
		mov    0x62(%esp),%esi
		mov    $0x34,%eax
		sar    $0x10,%esi
		mov    EXPORT_SYMBOL(colour_lookup)+0x00,%cl
		mov    %esi,%edx
		call   ac_draw_text
		mov    %esp,%ebx
		mov    $0x32,%eax
		xor    %ecx,%ecx
		mov    %esi,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+0x01,%cl
		call   ac_draw_text
		mov    0x64(%esp),%ecx
		add    $0xf,%ecx
		mov    EXPORT_SYMBOL(my_paths)+0x11(%edi),%ax
		mov    %cx,0x64(%esp)
		test   %ax,%ax
		jne    jump_bb23e
	jump_bb2cb:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		cmpw   $0x0,0x8e(%eax)
		je     jump_bb325
		mov    0x8c(%eax),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(things),%eax
		shl    $0x3,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    $0x29,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		mov    0x1c(%ebx),%ecx
		push   %eax
		mov    0x20(%ebx),%eax
		sar    $0x8,%ecx
		sar    $0x8,%eax
		mov    0x18(%ebx),%ebx
		push   %eax
		sar    $0x8,%ebx
		mov    $0x32,%eax
		call   ac_unkn_draw_transformed_point
	jump_bb325:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		cmpw   $0x0,0x48(%eax)
		je     jump_bb379
		mov    0x46(%eax),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(things),%eax
		shl    $0x3,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    $0x29,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		mov    0x1c(%ebx),%ecx
		push   %eax
		mov    0x20(%ebx),%eax
		sar    $0x8,%ecx
		sar    $0x8,%eax
		mov    0x18(%ebx),%ebx
		push   %eax
		sar    $0x8,%ebx
		mov    $0x8c,%eax
		call   ac_unkn_draw_transformed_point
	jump_bb379:
		mov    EXPORT_SYMBOL(p_track_thing),%ebx
		mov    0x40(%ebx),%edi
		test   %edi,%edi
		je     jump_bb3bb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    0x18(%edi),%ecx
		push   %eax
		mov    0x20(%edi),%eax
		mov    0x20(%ebx),%esi
		sar    $0x8,%eax
		mov    0x1c(%ebx),%edx
		push   %eax
		mov    0x1c(%edi),%eax
		sar    $0x8,%ecx
		sar    $0x8,%eax
		sar    $0x8,%esi
		push   %eax
		mov    0x18(%ebx),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %esi,%ebx
		call   ac_func_6fd1c
	jump_bb3bb:
		mov    EXPORT_SYMBOL(p_track_thing),%eax
		xor    %edx,%edx
		call   ac_unkn_path_func_001
	jump_bb3c7:
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_e7590:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0xa4,%esp
		sub    $0x7e,%ebp
		mov    %eax,-0x26(%ebp)
		mov    %edx,-0x22(%ebp)
		mov    %ebx,-0x1e(%ebp)
		mov    %ecx,-0x1a(%ebp)
		mov    EXPORT_SYMBOL(lbDisplay)+0x30,%ebx
		dec    %ebx
		cmpl   $0x0,-0x26(%ebp)
		jge    jump_e7663
		mov    -0x1e(%ebp),%ecx
		test   %ecx,%ecx
		jge    jump_e75c9
		mov    $0x1,%al
		jmp    jump_e79cd
	jump_e75c9:
		mov    -0x26(%ebp),%eax
		mov    -0x1e(%ebp),%esi
		sub    %esi,%eax
		mov    %eax,-0x16(%ebp)
		mov    -0x26(%ebp),%eax
		mov    %eax,-0x12(%ebp)
		mov    -0x22(%ebp),%eax
		mov    -0x1a(%ebp),%edi
		sub    %edi,%eax
		mov    %eax,-0xe(%ebp)
		mov    -0xe(%ebp),%edx
		mov    -0x12(%ebp),%eax
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    -0x16(%ebp),%ecx
		idiv   %ecx
		mov    %eax,-0xe(%ebp)
		xor    %esi,%esi
		mov    %esi,-0x26(%ebp)
		mov    -0xe(%ebp),%eax
		sub    %eax,-0x22(%ebp)
		movb   $0x1,0x7a(%ebp)
		mov    -0x1e(%ebp),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x30,%edx
		cmp    %edx,%eax
		jl     jump_e77ab
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%ecx
		sub    %ecx,%eax
		mov    %eax,-0xa(%ebp)
		mov    -0x1e(%ebp),%eax
		sub    %ebx,%eax
		mov    %eax,-0x6(%ebp)
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%esi
		sub    %esi,%eax
		mov    %eax,-0x2(%ebp)
		mov    -0x2(%ebp),%edx
		mov    -0x6(%ebp),%edi
		imul   %edi,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    -0xa(%ebp),%ebx
		idiv   %ebx
		mov    %eax,-0x2(%ebp)
		mov    EXPORT_SYMBOL(lbDisplay)+0x30,%eax
		dec    %eax
		mov    %eax,-0x1e(%ebp)
		mov    -0x2(%ebp),%eax
		sub    %eax,-0x1a(%ebp)
		jmp    jump_e77ab
	jump_e7663:
		mov    -0x26(%ebp),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x30,%esi
		cmp    %esi,%eax
		jl     jump_e771a
		mov    -0x1e(%ebp),%eax
		cmp    %esi,%eax
		jl     jump_e7686
		mov    $0x1,%al
		lea    0x7e(%ebp),%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_e7686:
		mov    -0x26(%ebp),%eax
		mov    -0x1e(%ebp),%edx
		sub    %edx,%eax
		mov    %eax,0x2(%ebp)
		mov    -0x26(%ebp),%eax
		sub    %ebx,%eax
		mov    %eax,0x6(%ebp)
		mov    -0x22(%ebp),%eax
		mov    -0x1a(%ebp),%ebx
		sub    %ebx,%eax
		mov    %eax,0xa(%ebp)
		mov    0xa(%ebp),%edx
		mov    0x6(%ebp),%ecx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x2(%ebp),%esi
		idiv   %esi
		mov    %eax,0xa(%ebp)
		mov    EXPORT_SYMBOL(lbDisplay)+0x30,%eax
		dec    %eax
		mov    %eax,-0x26(%ebp)
		mov    0xa(%ebp),%eax
		sub    %eax,-0x22(%ebp)
		movb   $0x1,0x7a(%ebp)
		mov    -0x1e(%ebp),%eax
		test   %eax,%eax
		jge    jump_e77ab
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%edx
		sub    %edx,%eax
		mov    %eax,0xe(%ebp)
		mov    -0x1e(%ebp),%eax
		mov    %eax,0x12(%ebp)
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%ebx
		sub    %ebx,%eax
		mov    %eax,0x16(%ebp)
		mov    0x16(%ebp),%edx
		mov    0x12(%ebp),%ecx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0xe(%ebp),%esi
		idiv   %esi
		mov    %eax,0x16(%ebp)
		xor    %edi,%edi
		mov    %edi,-0x1e(%ebp)
		mov    0x16(%ebp),%eax
		sub    %eax,-0x1a(%ebp)
		jmp    jump_e77ab
	jump_e771a:
		mov    -0x1e(%ebp),%ecx
		test   %ecx,%ecx
		jge    jump_e775d
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%esi
		sub    %esi,%eax
		mov    %eax,0x1a(%ebp)
		mov    -0x1e(%ebp),%eax
		mov    %eax,0x1e(%ebp)
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%edi
		sub    %edi,%eax
		mov    %eax,0x22(%ebp)
		mov    0x22(%ebp),%edx
		mov    0x1e(%ebp),%eax
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x1a(%ebp),%ebx
		idiv   %ebx
		mov    %eax,0x22(%ebp)
		xor    %ecx,%ecx
		mov    %ecx,-0x1e(%ebp)
		mov    0x22(%ebp),%eax
		jmp    jump_e77a4
	jump_e775d:
		mov    -0x1e(%ebp),%eax
		cmp    %esi,%eax
		jl     jump_e77ab
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%edx
		sub    %edx,%eax
		mov    %eax,0x26(%ebp)
		mov    -0x1e(%ebp),%eax
		sub    %ebx,%eax
		mov    %eax,0x2a(%ebp)
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%ebx
		sub    %ebx,%eax
		mov    %eax,0x2e(%ebp)
		mov    0x2e(%ebp),%edx
		mov    0x2a(%ebp),%ecx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x26(%ebp),%esi
		idiv   %esi
		mov    %eax,0x2e(%ebp)
		mov    EXPORT_SYMBOL(lbDisplay)+0x30,%eax
		dec    %eax
		mov    %eax,-0x1e(%ebp)
		mov    0x2e(%ebp),%eax
	jump_e77a4:
		sub    %eax,-0x1a(%ebp)
		movb   $0x1,0x7a(%ebp)
	jump_e77ab:
		mov    EXPORT_SYMBOL(lbDisplay)+0x34,%ebx
		dec    %ebx
		cmpl   $0x0,-0x22(%ebp)
		jge    jump_e7868
		mov    -0x1a(%ebp),%edx
		test   %edx,%edx
		jge    jump_e77ce
		mov    $0x1,%al
		lea    0x7e(%ebp),%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_e77ce:
		mov    -0x22(%ebp),%eax
		mov    -0x1a(%ebp),%ecx
		sub    %ecx,%eax
		mov    %eax,0x32(%ebp)
		mov    -0x22(%ebp),%eax
		mov    %eax,0x36(%ebp)
		mov    -0x26(%ebp),%eax
		mov    -0x1e(%ebp),%esi
		sub    %esi,%eax
		mov    %eax,0x3a(%ebp)
		mov    0x3a(%ebp),%edx
		mov    0x36(%ebp),%edi
		imul   %edi,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x32(%ebp),%ecx
		idiv   %ecx
		mov    %eax,0x3a(%ebp)
		xor    %esi,%esi
		mov    %esi,-0x22(%ebp)
		mov    0x3a(%ebp),%eax
		sub    %eax,-0x26(%ebp)
		movb   $0x1,0x7a(%ebp)
		mov    -0x1a(%ebp),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x34,%edx
		cmp    %edx,%eax
		jl     jump_e79b0
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%ecx
		sub    %ecx,%eax
		mov    %eax,0x3e(%ebp)
		mov    -0x1a(%ebp),%eax
		sub    %ebx,%eax
		mov    %eax,0x42(%ebp)
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%esi
		sub    %esi,%eax
		mov    %eax,0x46(%ebp)
		mov    0x46(%ebp),%edx
		mov    0x42(%ebp),%edi
		imul   %edi,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x3e(%ebp),%ebx
		idiv   %ebx
		mov    %eax,0x46(%ebp)
		mov    EXPORT_SYMBOL(lbDisplay)+0x34,%eax
		dec    %eax
		mov    %eax,-0x1a(%ebp)
		mov    0x46(%ebp),%eax
		sub    %eax,-0x1e(%ebp)
		jmp    jump_e79b0
	jump_e7868:
		mov    -0x22(%ebp),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+0x34,%esi
		cmp    %esi,%eax
		jl     jump_e791f
		mov    -0x1a(%ebp),%eax
		cmp    %esi,%eax
		jl     jump_e788b
		mov    $0x1,%al
		lea    0x7e(%ebp),%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_e788b:
		mov    -0x22(%ebp),%eax
		mov    -0x1a(%ebp),%edx
		sub    %edx,%eax
		mov    %eax,0x4a(%ebp)
		mov    -0x22(%ebp),%eax
		sub    %ebx,%eax
		mov    %eax,0x4e(%ebp)
		mov    -0x26(%ebp),%eax
		mov    -0x1e(%ebp),%ebx
		sub    %ebx,%eax
		mov    %eax,0x52(%ebp)
		mov    0x52(%ebp),%edx
		mov    0x4e(%ebp),%ecx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x4a(%ebp),%esi
		idiv   %esi
		mov    %eax,0x52(%ebp)
		mov    EXPORT_SYMBOL(lbDisplay)+0x34,%eax
		dec    %eax
		mov    %eax,-0x22(%ebp)
		mov    0x52(%ebp),%eax
		sub    %eax,-0x26(%ebp)
		movb   $0x1,0x7a(%ebp)
		mov    -0x1a(%ebp),%eax
		test   %eax,%eax
		jge    jump_e79b0
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%edx
		sub    %edx,%eax
		mov    %eax,0x56(%ebp)
		mov    -0x1a(%ebp),%eax
		mov    %eax,0x5a(%ebp)
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%ebx
		sub    %ebx,%eax
		mov    %eax,0x5e(%ebp)
		mov    0x5e(%ebp),%edx
		mov    0x5a(%ebp),%ecx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x56(%ebp),%esi
		idiv   %esi
		mov    %eax,0x5e(%ebp)
		xor    %edi,%edi
		mov    %edi,-0x1a(%ebp)
		mov    0x5e(%ebp),%eax
		sub    %eax,-0x1e(%ebp)
		jmp    jump_e79b0
	jump_e791f:
		mov    -0x1a(%ebp),%ecx
		test   %ecx,%ecx
		jge    jump_e7962
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%esi
		sub    %esi,%eax
		mov    %eax,0x62(%ebp)
		mov    -0x1a(%ebp),%eax
		mov    %eax,0x66(%ebp)
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%edi
		sub    %edi,%eax
		mov    %eax,0x6a(%ebp)
		mov    0x6a(%ebp),%edx
		mov    0x66(%ebp),%eax
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x62(%ebp),%ebx
		idiv   %ebx
		mov    %eax,0x6a(%ebp)
		xor    %ecx,%ecx
		mov    %ecx,-0x1a(%ebp)
		mov    0x6a(%ebp),%eax
		jmp    jump_e79a9
	jump_e7962:
		mov    -0x1a(%ebp),%eax
		cmp    %esi,%eax
		jl     jump_e79b0
		mov    -0x1a(%ebp),%eax
		mov    -0x22(%ebp),%edx
		sub    %edx,%eax
		mov    %eax,0x6e(%ebp)
		mov    -0x1a(%ebp),%eax
		sub    %ebx,%eax
		mov    %eax,0x72(%ebp)
		mov    -0x1e(%ebp),%eax
		mov    -0x26(%ebp),%ebx
		sub    %ebx,%eax
		mov    %eax,0x76(%ebp)
		mov    0x76(%ebp),%edx
		mov    0x72(%ebp),%ecx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		mov    0x6e(%ebp),%esi
		idiv   %esi
		mov    %eax,0x76(%ebp)
		mov    EXPORT_SYMBOL(lbDisplay)+0x34,%eax
		dec    %eax
		mov    %eax,-0x1a(%ebp)
		mov    0x76(%ebp),%eax
	jump_e79a9:
		sub    %eax,-0x1e(%ebp)
		movb   $0x1,0x7a(%ebp)
	jump_e79b0:
		xor    %eax,%eax
		mov    0x8e(%ebp),%al
		mov    -0x1a(%ebp),%ecx
		mov    -0x1e(%ebp),%ebx
		mov    -0x22(%ebp),%edx
		push   %eax
		mov    -0x26(%ebp),%eax
		call   ac_draw_b_line
		mov    0x7a(%ebp),%al
	jump_e79cd:
		lea    0x7e(%ebp),%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


.section .rodata

weapon_names:
		.long   aWepNull
		.long   aWepUzi
		.long   aWepMinigun
		.long   aWepLaser
		.long   aWepElLaser
		.long   aWepRap
		.long   aWepNuclGren
		.long   aWepPersuadrtrn
		.long   aWepFlamer
		.long   aWepH2HTaser
		.long   aWepCrazyGas
		.long   aWepKOGas
		.long   aWepEleMine
		.long   aWepExplMine
		.long   aWepNapalmMine
		.long   aWepLongRange
		.long   aWepAirStrike
		.long   aWepBeam
		.long   aWepRazorWire
		.long   aWepSonicBlast
		.long   aWepQDevastator
		.long   aWepPersuader2
		.long   aWepStasisFld
		.long   aWepEnergyShld
		.long   aWepSoulGun
		.long   aWepTimeGun
		.long   aWepCerebusIff
		.long   aWepMedi1
		.long   aWepMedi2
		.long   aWepExplWire
		.long   aWepCloneShld
		.long	0x0
		.long   aEmptyItm0
		.long   aEmptyItm1
		.long   aEmptyItm2
		.long   aEmptyItm3
		.long   aEmptyItm4
		.long   aEmptyItm5
		.long   aEmptyItm6


aThDIdD:	/* 0x15DD2C */
		.string "TH %d ID %d"
aThDIdD_0:	/* 0x15DD38 */
		.string "TH %d ID %d"
aD_53:	/* 0x15DD44 */
		.string "%d "
ascU:	/* 0x15DD48 */
		.string "U "
ascIu:	/* 0x15DD4B */
		.string "IU "
data_15dd4f:
		.string "!!!"
aIgnoreEnemies:	/* 0x15DD53 */
		.string "IGNORE ENEMIES"
aLoopComD:	/* 0x15DD62 */
		.string "LOOP COM %d"
aGoToPointXDYDZ:	/* 0x15DD6E */
		.string "GO TO POINT X%d Y%d Z%d"
aPlaySampleD:	/* 0x15DD86 */
		.string "PLAY SAMPLE %d"
aRunToPointXDZD:	/* 0x15DD95 */
		.string "RUN TO POINT X%d Z%d"
aGotopointFaceD:	/* 0x15DDAA */
		.string "GOTOPOINT FACE %d X%d Z%d"
aKillEveryone:	/* 0x15DDC4 */
		.string "KILL EVERYONE"
aWithinAreaXDYD:	/* 0x15DDD2 */
		.string "WITHIN AREA X%d Y%d Z%d"
aWithinOff:	/* 0x15DDEA */
		.string "WITHIN OFF"
aExecuteComsPly:	/* 0x15DDF5 */
		.string "Execute Coms (plyr)"
aGuardOff:	/* 0x15DE09 */
		.string "GUARD OFF"
aHardAsAgent:	/* 0x15DE13 */
		.string "HARD AS AGENT"
aPingExist:	/* 0x15DE21 */
		.string "PING EXIST"
aStartDangerMus:	/* 0x15DE2C */
		.string "start danger music"
aSelf_destruct:	/* 0x15DE3F */
		.string "SELF_DESTRUCT"
aGoToPersonD:	/* 0x15DE4D */
		.string "GO TO PERSON %d"
aCameraTrackD:	/* 0x15DE5D */
		.string "CAMERA TRACK %d"
aKillPersonD:	/* 0x15DE6D */
		.string "KILL PERSON %d"
aKillDMemGroupD:	/* 0x15DE7C */
		.string "KILL %d MEM GROUP %d"
aUntruceGroupD:	/* 0x15DE91 */
		.string "UNTRUCE GROUP %d"
aKillAllGroupD:	/* 0x15DEA2 */
		.string "KILL ALL GROUP %d"
aFollowPersonD:	/* 0x15DEB4 */
		.string "FOLLOW PERSON %d"
aProtectMemGD:	/* 0x15DEC5 */
		.string "PROTECT MEM G %d"
aSupportPersonD:	/* 0x15DED6 */
		.string "SUPPORT PERSON %d"
aProtectPersonD:	/* 0x15DEE8 */
		.string "PROTECT PERSON %d idx %d"
aBlockPersonD:	/* 0x15DF01 */
		.string "BLOCK PERSON %d"
aScarePersonD:	/* 0x15DF11 */
		.string "SCARE PERSON %d"
aPersuadePerson:	/* 0x15DF21 */
		.string "PERSUADE PERSON %d"
aPersuadeAllGD:	/* 0x15DF34 */
		.string "PERSUADE All G %d"
aPersuadeDMemGD:	/* 0x15DF46 */
		.string "PERSUADE %d Mem G %d"
aAvoidPersonD:	/* 0x15DF5B */
		.string "AVOID PERSON %d"
aWandAvoidGroup:	/* 0x15DF6B */
		.string "WAND AVOID GROUP %d"
aHide:	/* 0x15DF7F */
		.string "HIDE"
aDestroyBuildin:	/* 0x15DF84 */
		.string "DESTROY BUILDING %d"
aCatchTrainD:	/* 0x15DF98 */
		.string "CATCH TRAIN %d"
aCatchFerryD:	/* 0x15DFA7 */
		.string "CATCH FERRY %d"
aExitFerryD:	/* 0x15DFB6 */
		.string "EXIT FERRY %d"
aOpenDomeD:	/* 0x15DFC4 */
		.string "OPEN DOME %d"
aCloseDomeD:	/* 0x15DFD1 */
		.string "CLOSE DOME %d"
aLockBuildD:	/* 0x15DFDF */
		.string "LOCK BUILD %d"
aUnlockBuildD:	/* 0x15DFED */
		.string "UNLOCK BUILD %d"
aGetItemD:	/* 0x15DFFD */
		.string "GET ITEM %d"
aSelectWeaponS:	/* 0x15E009 */
		.string "SELECT WEAPON %s "
aUseWeaponS:	/* 0x15E01B */
		.string "USE WEAPON %s"
aDropSpecItemD:	/* 0x15E029 */
		.string "DROP SPEC ITEM %d"
aDropWeaponS:	/* 0x15E03B */
		.string "DROP WEAPON %s"
aUseVehicleD:	/* 0x15E04A */
		.string "USE VEHICLE %d"
aExitVehicle:	/* 0x15E059 */
		.string "EXIT VEHICLE"
aWaitPVDeadD:	/* 0x15E066 */
		.string "WAIT P/V DEAD %d"
aWaitPVINearD:	/* 0x15E077 */
		.string "WAIT P/V/I NEAR %d"
aPingPVD:	/* 0x15E08A */
		.string "PING P/V %d"
aWaitPVIArrives:	/* 0x15E096 */
		.string "WAIT P/V/I ARRIVES %d X%d Y%d Z%d"
aWaitPPersuaded:	/* 0x15E0B8 */
		.string "WAIT P PERSUADED %d"
aWaitDMemGDeadD:	/* 0x15E0CC */
		.string "WAIT %d MEM G DEAD %d"
aWaitDMemGDNear:	/* 0x15E0E2 */
		.string "WAIT %d MEM G %d NEAR "
aWaitDMemGArriv:	/* 0x15E0F9 */
		.string "WAIT %d MEM G ARRIVE %d"
aWaitDMemGPersu:	/* 0x15E111 */
		.string "WAIT %d MEM G PERSUADED %d"
aWaitAllGDeadD:	/* 0x15E12C */
		.string "WAIT ALL G DEAD %d"
aWaitAllGDNear:	/* 0x15E13F */
		.string "WAIT ALL G %d NEAR "
aWaitAllGArrive:	/* 0x15E153 */
		.string "WAIT ALL G ARRIVE %d"
aWaitAllGPersua:	/* 0x15E168 */
		.string "WAIT ALL G PERSUADED %d"
aWaitMissionSta:	/* 0x15E180 */
		.string "WAIT MISSION START %d"
aWaitMissionSuc:	/* 0x15E196 */
		.string "WAIT MISSION SUCC %d"
aWaitMissionFai:	/* 0x15E1AB */
		.string "WAIT MISSION FAIL %d"
aWaitObjectDest:	/* 0x15E1C0 */
		.string "WAIT OBJECT DESTROYED %d X%d Y%d Z%d"
aWaitTimeD:	/* 0x15E1E5 */
		.string "WAIT TIME %d"
aWaitObj:	/* 0x15E1F2 */
		.string "WAIT OBJ:-"
aWandPVDeadD:	/* 0x15E1FD */
		.string "WAND P/V DEAD %d"
aWandPVINearD:	/* 0x15E20E */
		.string "WAND P/V/I NEAR %d"
aWandPVIArrives:	/* 0x15E221 */
		.string "WAND P/V/I ARRIVES %d X%d Y%d Z%d"
aWandPPersuaded:	/* 0x15E243 */
		.string "WAND P PERSUADED %d"
aWandDMemGDDead:	/* 0x15E257 */
		.string "WAND %d MEM G %d DEAD "
aWandDMemGDNear:	/* 0x15E26E */
		.string "WAND %d MEM G %d NEAR "
aWandDMemGArriv:	/* 0x15E285 */
		.string "WAND %d MEM G ARRIVE %d"
aWandDMemGPersu:	/* 0x15E29D */
		.string "WAND %d MEM G PERSUADED %d"
aWandAllGDeadD:	/* 0x15E2B8 */
		.string "WAND ALL G DEAD %d"
aWandAllGDNear:	/* 0x15E2CB */
		.string "WAND ALL G %d NEAR "
aWandAllGArrive:	/* 0x15E2DF */
		.string "WAND ALL G ARRIVE %d"
aWandAllGPersua:	/* 0x15E2F4 */
		.string "WAND ALL G PERSUADED %d"
aWandObj:	/* 0x15E30C */
		.string "WAND OBJ:-"
aWandMissionSta:	/* 0x15E317 */
		.string "WAND MISSION START %d"
aWandMissionSuc:	/* 0x15E32D */
		.string "WAND MISSION SUCC %d"
aWandMissionFai:	/* 0x15E342 */
		.string "WAND MISSION FAIL %d"
aWandObjectDest:	/* 0x15E357 */
		.string "WAND OBJECT DESTROYED %d X%d Y%d Z%d"
aWandTimeD:	/* 0x15E37C */
		.string "WAND TIME %d"
aUntilGDNotSeen:	/* 0x15E389 */
		.string "UNTIL G %d NOT SEEN"
aUntilPVDeadD:	/* 0x15E39D */
		.string "UNTIL P/V DEAD %d"
aUntilPVINearD:	/* 0x15E3AF */
		.string "UNTIL P/V/I NEAR %d"
aUntilPVIArrive:	/* 0x15E3C3 */
		.string "UNTIL P/V/I ARRIVES %d X%d Y%d Z%d"
aUntilPPersuade:	/* 0x15E3E6 */
		.string "UNTIL P PERSUADED %d"
aUntilDMemGDead:	/* 0x15E3FB */
		.string "UNTIL %d MEM G DEAD %d"
aUntilDMemGDNea:	/* 0x15E412 */
		.string "UNTIL %d MEM G %d NEAR "
aUntilDMemGArri:	/* 0x15E42A */
		.string "UNTIL %d MEM G ARRIVE %d"
aUntilDMemGPers:	/* 0x15E443 */
		.string "UNTIL %d MEM G PERSUADED %d"
aUntilAllGDeadD:	/* 0x15E45F */
		.string "UNTIL ALL G DEAD %d"
aUntilAllGDNear:	/* 0x15E473 */
		.string "UNTIL ALL G %d NEAR "
aUntilAllGArriv:	/* 0x15E488 */
		.string "UNTIL ALL G ARRIVE %d"
aUntilAllGPersu:	/* 0x15E49E */
		.string "UNTIL ALL G PERSUADED %d"
aUntilObj:	/* 0x15E4B7 */
		.string "UNTIL OBJ:-"
aUntilMissionSt:	/* 0x15E4C3 */
		.string "UNTIL MISSION START %d"
aUntilMissionSu:	/* 0x15E4DA */
		.string "UNTIL MISSION SUCC %d"
aUntilMissionFa:	/* 0x15E4F0 */
		.string "UNTIL MISSION FAIL %d"
aUntilObjectDes:	/* 0x15E506 */
		.string "UNTIL OBJECT DESTROYED %d X%d Y%d Z%d"
aUntilTimeD:	/* 0x15E52C */
		.string "UNTIL TIME %d"

aStateDSMoodDGD:	/* 0x15E53A */
		.string "State %d %s Mood %d G %d comcur %x EG %d th %d am %d"
aF08xSpdDOfDHeD:	/* 0x15E56F */
		.string "F  %08x Spd %d OF %d He %d/%d Se %d/%d SF %d F %d"
aF208xF3XCwDWcX:	/* 0x15E5A1 */
		.string "F2 %08x F3 %x cw %d wc %x WE %d wti %d wt %d PC %d"
aTarg2DPtargXGo:	/* 0x15E5D4 */
		.string "TARG2 %d PTARG %x gotoTI %d"
ascDa:	/* 0x15E5F0 */
		.ascii  "\x44\x61\x00"
ascRe:	/* 0x15E5F3 */
		.ascii  "\x52\x65\x00"
ascSi:	/* 0x15E5F6 */
		.ascii  "\x53\x69\x00"
ascDe:	/* 0x15E5F9 */
		.ascii  "\x44\x65\x00"
ascCh:	/* 0x15E5FC */
		.ascii  "\x43\x68\x00"
ascCi:	/* 0x15E5FF */
		.ascii  "\x43\x49\x00"
ascSap:	/* 0x15E602 */
		.ascii  "\x53\x41\x50\x00"
ascSta:	/* 0x15E606 */
		.ascii  "\x53\x74\x61\x00"
ascTrig:	/* 0x15E60A */
		.string "TRIG"
aPersonLastdist:	/* 0x15E60F */
		.string "PERSON: lastdist %d VX,VZ (%d,%d)"
aVehicle:	/* 0x15E631 */
		.string "VEHICLE"
aTypeD:	/* 0x15E639 */
		.string "Type %d"
aBDLDADBrDSkD:	/* 0x15E641 */
		.string "b %d l %d a %d br %d sk %d"
aT1DT2DCtDRtDBc:	/* 0x15E65C */
		.string "T1 %d T2 %d ct %d RT %d BC %d"
aNDFDXDZD:	/* 0x15E67A */
		.string " n %d  f %d  x %d z %d"

aWepNull:	/* 0x15E691 */
		.byte	0x0
aWepUzi:	/* 0x15E692 */
		.string " Uzi"
aWepMinigun:	/* 0x15E697 */
		.string " Minigun"
aWepLaser:	/* 0x15E6A0 */
		.string " Laser"
aWepElLaser:	/* 0x15E6A7 */
		.string " Electric Laser"
aWepRap:	/* 0x15E6B7 */
		.string " RAP"
aWepNuclGren:	/* 0x15E6BC */
		.string " Nuclear Grenade"
aWepPersuadrtrn:	/* 0x15E6CD */
		.string " Persuadertron"
aWepFlamer:	/* 0x15E6DC */
		.string " Flamer"
aWepH2HTaser:	/* 0x15E6E4 */
		.string " Hand2Hand Taser"
aWepCrazyGas:	/* 0x15E6F5 */
		.string " Crazy Gas"
aWepKOGas:	/* 0x15E700 */
		.string " Knockout Gas"
aWepEleMine:	/* 0x15E70E */
		.string " Electric Mine"
aWepExplMine:	/* 0x15E71D */
		.string " Explosive Mine"
aWepNapalmMine:	/* 0x15E72D */
		.string " ***Napalm Mine"
aWepLongRange:	/* 0x15E73D */
		.string " Long Range"
aWepAirStrike:	/* 0x15E749 */
		.string " Air Strike"
aWepBeam:	/* 0x15E755 */
		.string " Beam"
aWepRazorWire:	/* 0x15E75B */
		.string " Razor Wire"
aWepSonicBlast:	/* 0x15E767 */
		.string " Sonic Blast"
aWepQDevastator:	/* 0x15E774 */
		.string " Q DEVASTATOR"
aWepPersuader2:	/* 0x15E782 */
		.string " PERSUADERTRON2"
aWepStasisFld:	/* 0x15E792 */
		.string " Stasis Field"
aWepEnergyShld:	/* 0x15E7A0 */
		.string " Energy Shield"
aWepSoulGun:	/* 0x15E7AF */
		.string " Soul Gun"
aWepTimeGun:	/* 0x15E7B9 */
		.string " Time Gun"
aWepCerebusIff:	/* 0x15E7C3 */
		.string " Cerebus IFF"
aWepMedi1:	/* 0x15E7D0 */
		.string " medi 1"
aWepMedi2:	/* 0x15E7D8 */
		.string " medi 2"
aWepExplWire:	/* 0x15E7E0 */
		.string " EXPLODE Wire"
aWepCloneShld:	/* 0x15E7EE */
		.string " Clone Shield"
aEmptyItm0:	/* 0x15E7FC */
		.byte	0x0
aEmptyItm1:	/* 0x15E7FD */
		.byte	0x0
aEmptyItm2:	/* 0x15E7FE */
		.byte	0x0
aEmptyItm3:	/* 0x15E7FF */
		.byte	0x0
aEmptyItm4:	/* 0x15E800 */
		.byte	0x0
aEmptyItm5:	/* 0x15E801 */
		.byte	0x0
aEmptyItm6:	/* 0x15E802 */
		.short  0x0

/* Person state text.
 * Used by function at 0xBAC50, which was not disassembled.
 */
person_st_text:	/* 0x154AAC */
		.long   aSt_null
		.long   aSt_goto_point
		.long   aSt_bomb_buildi
		.long   aSt_wander
		.long   aSt_explode_eff
		.long   aSt_wait
		.long   aSt_agent_defen
		.long   aSt_pickup_item
		.long   aSt_drop_item
		.long   aSt_shoot_perso
		.long   aSt_shoot_bgun_
		.long   aSt_die
		.long   aSt_dieing
		.long   aSt_dead
		.long   aSt_init_save_v
		.long   aSt_save_victim
		.long   aSt_goto_person
		.long   aSt_wait_p_dead
		.long   aSt_wait_all_g_
		.long   aSt_wait_mem_g_
		.long   aSt_wait_p_near
		.long   aSt_wait_mem__0
		.long   aSt_wait_p_arri
		.long   aSt_wait_mem__1
		.long   aSt_wait_time
		.long   aSt_define_rout
		.long   aSt_Unused
		.long   aSt_kill_person
		.long   aSt_block_perso
		.long   aSt_scare_perso
		.long   aSt_use_item
		.long   aSt_stationary_
		.long   aSt_recoil_hit
		.long   aSt_v_parked
		.long   aSt_v_driven
		.long   aSt_goto_point_
		.long   aSt_person_burn
		.long   aSt_in_vehicle
		.long   aSt_driving_veh
		.long   aSt_v_goto_poin
		.long   aSt_persuade_pe
		.long   aSt_follow_pers
		.long   aSt_support_per
		.long   aSt_protect_per
		.long   aSt_get_item
		.long   aSt_use_vehicle
		.long   aSt_use_vehic_0
		.long   aSt_wait_vehicl
		.long   aSt_goto_vehicl
		.long   aSt_catch_train
		.long   aSt_wait_train
		.long   aSt_destroy_bui
		.long   aSt_wander_driv
		.long   aSt_go_plant_mi
		.long   aSt_wait_to_exi
		.long   aSt_catch_ferry
		.long   aSt_exit_ferry
		.long   aSt_avoid_group
		.long   aSt_undef58
		.long   aSt_undef59
		.long   aSt_undef60
		.long   aSt_undef61
		.long   aSt_undef62
		.long   aSt_undef63
		.long   aSt_undef64
		.long   aSt_undef65

aSt_null:	/* 0x15CDC0 */
		.string ""
aSt_goto_point:	/* 0x15CDC1 */
		.string "ST_GOTO_POINT"
aSt_bomb_buildi:	/* 0x15CDCF */
		.string "ST_BOMB_BUILDING"
aSt_wander:	/* 0x15CDE0 */
		.string "ST_WANDER"
aSt_explode_eff:	/* 0x15CDEA */
		.string "ST_EXPLODE_EFFECT"
aSt_wait:	/* 0x15CDFC */
		.string "ST_WAIT"
aSt_agent_defen:	/* 0x15CE04 */
		.string "ST_AGENT_DEFENSIVE"
aSt_pickup_item:	/* 0x15CE17 */
		.string "ST_PICKUP_ITEM"
aSt_drop_item:	/* 0x15CE26 */
		.string "ST_DROP_ITEM"
aSt_shoot_perso:	/* 0x15CE33 */
		.string "ST_SHOOT_PERSON_WITH_BGUN"
aSt_shoot_bgun_:	/* 0x15CE4D */
		.string "ST_SHOOT_BGUN_AT"
aSt_die:	/* 0x15CE5E */
		.string "ST_DIE"
aSt_dieing:	/* 0x15CE65 */
		.string "ST_DIEING"
aSt_dead:	/* 0x15CE6F */
		.string "ST_DEAD"
aSt_init_save_v:	/* 0x15CE77 */
		.string "ST_INIT_SAVE_VICTIM"
aSt_save_victim:	/* 0x15CE8B */
		.string "ST_SAVE_VICTIM"
aSt_goto_person:	/* 0x15CE9A */
		.string "ST_GOTO_PERSON"
aSt_wait_p_dead:	/* 0x15CEA9 */
		.string "ST_WAIT_P_DEAD"
aSt_wait_all_g_:	/* 0x15CEB8 */
		.string "ST_WAIT_ALL_G_DEAD"
aSt_wait_mem_g_:	/* 0x15CECB */
		.string "ST_WAIT_MEM_G_DEAD"
aSt_wait_p_near:	/* 0x15CEDE */
		.string "ST_WAIT_P_NEAR"
aSt_wait_mem__0:	/* 0x15CEED */
		.string "ST_WAIT_MEM_G_NEAR"
aSt_wait_p_arri:	/* 0x15CF00 */
		.string "ST_WAIT_P_ARRIVES"
aSt_wait_mem__1:	/* 0x15CF12 */
		.string "ST_WAIT_MEM_G_ARRIVES"
aSt_wait_time:	/* 0x15CF28 */
		.string "ST_WAIT_TIME"
aSt_define_rout:	/* 0x15CF35 */
		.string "ST_DEFINE_ROUTE"
aSt_Unused:	/* 0x15CF45 */
		.string " UNUSED"
aSt_kill_person:	/* 0x15CF4D */
		.string "ST_KILL_PERSON"
aSt_block_perso:	/* 0x15CF5C */
		.string "ST_BLOCK_PERSON"
aSt_scare_perso:	/* 0x15CF6C */
		.string "ST_SCARE_PERSON"
aSt_use_item:	/* 0x15CF7C */
		.string "ST_USE_ITEM "
aSt_stationary_:	/* 0x15CF89 */
		.string "ST_STATIONARY_SHOT"
aSt_recoil_hit:	/* 0x15CF9C */
		.string "ST_RECOIL_HIT"
aSt_v_parked:	/* 0x15CFAA */
		.string "ST_V_PARKED"
aSt_v_driven:	/* 0x15CFB6 */
		.string "ST_V_DRIVEN"
aSt_goto_point_:	/* 0x15CFC2 */
		.string "ST_GOTO_POINT_REL"
aSt_person_burn:	/* 0x15CFD4 */
		.string "ST_PERSON_BURNING"
aSt_in_vehicle:	/* 0x15CFE6 */
		.string "ST_IN_VEHICLE"
aSt_driving_veh:	/* 0x15CFF4 */
		.string "ST_DRIVING_VEHICLE"
aSt_v_goto_poin:	/* 0x15D007 */
		.string "ST_V_GOTO_POINT_FLY"
aSt_persuade_pe:	/* 0x15D01B */
		.string "ST_PERSUADE_PERSON"
aSt_follow_pers:	/* 0x15D02E */
		.string "ST_FOLLOW_PERSON"
aSt_support_per:	/* 0x15D03F */
		.string "ST_SUPPORT_PERSON"
aSt_protect_per:	/* 0x15D051 */
		.string "ST_PROTECT_PERSON"
aSt_get_item:	/* 0x15D063 */
		.string "ST_GET_ITEM"
aSt_use_vehicle:	/* 0x15D06F */
		.string "ST_USE_VEHICLE"
aSt_use_vehic_0:	/* 0x15D07E */
		.string "ST_USE_VEHICLE_TO_POINT"
aSt_wait_vehicl:	/* 0x15D096 */
		.string "ST_WAIT_VEHICLE"
aSt_goto_vehicl:	/* 0x15D0A6 */
		.string "ST_GOTO_VEHICLE"
aSt_catch_train:	/* 0x15D0B6 */
		.string "ST_CATCH_TRAIN"
aSt_wait_train:	/* 0x15D0C5 */
		.string "ST_WAIT_TRAIN"
aSt_destroy_bui:	/* 0x15D0D3 */
		.string "ST_DESTROY_BUILDING"
aSt_wander_driv:	/* 0x15D0E7 */
		.string "ST_WANDER_DRIVE"
aSt_go_plant_mi:	/* 0x15D0F7 */
		.string "ST_GO_PLANT_MINE"
aSt_wait_to_exi:	/* 0x15D108 */
		.string "ST_WAIT_TO_EXIT_VEHICLE"
aSt_catch_ferry:	/* 0x15D120 */
		.string "ST_CATCH_FERRY"
aSt_exit_ferry:	/* 0x15D12F */
		.string "ST_EXIT_FERRY"
aSt_avoid_group:	/* 0x15D13D */
		.string "ST_AVOID_GROUP"
aSt_undef58:	/* 0x15D14C */
		.string ""
aSt_undef59:	/* 0x15D14D */
		.string ""
aSt_undef60:	/* 0x15D14E */
		.string ""
aSt_undef61:	/* 0x15D14F */
		.string ""
aSt_undef62:	/* 0x15D150 */
		.string ""
aSt_undef63:	/* 0x15D151 */
		.string ""
aSt_undef64:	/* 0x15D152 */
		.string ""
aSt_undef65:	/* 0x15D153 */
		.string ""

.data

data_1dc79e:
		.short  0x0
data_1dc7a0:
		.short  0x0
data_1dc7a2:
		.short  0x0
data_1dc7a4:
		.long	0x0
		.fill   0x84
