
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif


.text

/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_LbDosKeyboard)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %ebp
		mov    %esp,%ebp
		sub    $0x1c,%esp
		movb   $0x12,-0x1b(%ebp)
		lea    -0x1c(%ebp),%ebx
		lea    -0x1c(%ebp),%edx
		mov    $0x16,%eax
		call   ac_dos_int386
		xor    %dl,%dl
		mov    %dl,lbShift
		testb  $0x3,-0x1c(%ebp)
		je     jump_ec4b9
		movb   $0x1,lbShift
	jump_ec4b9:
		testb  $0x4,-0x1c(%ebp)
		je     jump_ec4c6
		orb    $0x2,lbShift
	jump_ec4c6:
		testb  $0x8,-0x1c(%ebp)
		je     jump_ec4d3
		orb    $0x4,lbShift
	jump_ec4d3:
		xor    %ah,%ah
		mov    %ah,lbInkey
		mov    $0x11,%ah
		int    $0x16
		je     jump_ec4eb
		mov    $0x10,%ah
		int    $0x16
		mov    %ah,lbInkey
	jump_ec4eb:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void KInt_unused(void);
 * Unused alternative keyboard handler?
 */
KInt_unused:
/*----------------------------------------------------------------*/
		pusha
		push   %ds
		push   %es
		push   %fs
		push   %gs
		mov    %esp,%ebp
		sub    $0x8,%esp
		cld
		call   ____GETDS
		mov    $0x60,%edx
		sub    %eax,%eax
		in     (%dx),%al
		mov    %al,lbInkey
		xor    %eax,%eax
		mov    data_1e5ca0,%al
		cmp    $0xe0,%eax
		jne    jump_ec55b
		movb   $0x1,lbInkey_prefixed
		xor    %eax,%eax
		mov    lbInkey,%al
		cmp    $0x2a,%eax
		je     jump_ec542
		xor    %eax,%eax
		mov    lbInkey,%al
		cmp    $0xaa,%eax
		jne    jump_ec552
	jump_ec542:
		movb   $0x80,lbInkey
		movl   $0x80,-0x8(%ebp)
		jmp    jump_ec588
	jump_ec552:
		mov    lbInkey,%al
		or     $0x80,%al
		jmp    jump_ec56a
	jump_ec55b:
		xor    %dh,%dh
		mov    %dh,lbInkey_prefixed
		mov    lbInkey,%al
		and    $0x7f,%al
	jump_ec56a:
		and    $0xff,%eax
		mov    %eax,-0x8(%ebp)
		xor    %eax,%eax
		mov    lbInkey,%al
		cmp    $0x7f,%eax
		setle  %dl
		mov    -0x8(%ebp),%eax
		mov    %dl,lbKeyOn(%eax)
	jump_ec588:
		mov    lbInkey,%al
		mov    %al,data_1e5ca0
		xor    %bl,%bl
		mov    %bl,lbInkeyFlags
		cmpb   $0x0,lbKeyOn+42
		jne    jump_ec5ac
		cmpb   $0x0,lbKeyOn+54
		je     jump_ec5b3
	jump_ec5ac:
		orb    $0x10,lbInkeyFlags
	jump_ec5b3:
		cmpb   $0x0,lbKeyOn+29
		jne    jump_ec5c5
		cmpb   $0x0,lbKeyOn+157
		je     jump_ec5cc
	jump_ec5c5:
		orb    $0x20,lbInkeyFlags
	jump_ec5cc:
		cmpb   $0x0,lbKeyOn+56
		jne    jump_ec5de
		cmpb   $0x0,lbKeyOn+184
		je     jump_ec5e5
	jump_ec5de:
		orb    $0x40,lbInkeyFlags
	jump_ec5e5:
		mov    -0x8(%ebp),%eax
		cmpb   $0x0,lbKeyOn(%eax)
		je     jump_ec600
		mov    lbInkeyFlags,%dl
		mov    -0x8(%ebp),%eax
		or     %dl,lbKeyOn(%eax)
	jump_ec600:
		mov    $0x61,%edx
		sub    %eax,%eax
		in     (%dx),%al
		cwtl
		mov    %eax,-0x8(%ebp)
		mov    -0x8(%ebp),%eax
		mov    %eax,-0x4(%ebp)
		mov    -0x8(%ebp),%ebx
		or     $0x80,%bl
		mov    %ebx,-0x8(%ebp)
		mov    -0x8(%ebp),%eax
		out    %al,(%dx)
		mov    -0x4(%ebp),%eax
		out    %al,(%dx)
		xor    %eax,%eax
		mov    lbInkey,%al
		cmp    $0x80,%eax
		jge    jump_ec64e
		cmpb   $0x0,lbIInkey
		jne    jump_ec64e
		mov    lbInkey,%al
		mov    %al,lbIInkey
		mov    lbInkeyFlags,%al
		mov    %al,lbIInkeyFlags
	jump_ec64e:
		mov    $0x20,%al
		mov    $0x20,%edx
		out    %al,(%dx)
		mov    %ebp,%esp
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
		popa
		iret


/*----------------------------------------------------------------*/
func_8c4c0_keyboard_clear_buffer:
/*----------------------------------------------------------------*/
		push   %edx
		xor    %edx,%edx
		mov    %edx,keyboard_buffer_read_index
		mov    keyboard_buffer_read_index,%eax
		mov    %eax,keyboard_buffer_write_index
		pop    %edx
		ret


/*----------------------------------------------------------------*/
func_8c4d8_keyboard_read_key:
/*----------------------------------------------------------------*/
		push   %edx
		mov    keyboard_buffer_write_index,%eax
		mov    keyboard_buffer_read_index,%edx
		cmp    %edx,%eax
		jne    jump_8c4ec
		xor    %edx,%eax
		pop    %edx
		ret
	jump_8c4ec:
		mov    keyboard_buffer_read_index,%eax
		mov    keyboard_buffer(,%eax,4),%eax
		mov    keyboard_buffer_read_index,%edx
		incl   keyboard_buffer_read_index
		andl   $0xf,keyboard_buffer_read_index
		pop    %edx
		ret


/*----------------------------------------------------------------*/
KInt:	/* 8c578 */
/*----------------------------------------------------------------*/
		pusha
		push   %ds
		push   %es
		push   %fs
		push   %gs
		mov    %esp,%ebp
		cld
		call   ____GETDS
		mov    $0x60,%edx
		sub    %eax,%eax
		in     (%dx),%al
		mov    %al,lbInkey
		xor    %eax,%eax
		mov    oinkey,%al
		cmp    $0xe0,%eax
		jne    jump_8c5f6
		movb   $0x1,lbInkey_prefixed
		xor    %eax,%eax
		mov    lbInkey,%al
		cmp    $0x2a,%eax
		je     jump_8c5c3
		xor    %eax,%eax
		mov    lbInkey,%al
		cmp    $0xaa,%eax
		jne    jump_8c5d4
	jump_8c5c3:
		movb   $0x80,lbInkey
		mov    $0x80,%eax
		jmp    jump_8c64c
	jump_8c5d4:
		mov    lbInkey,%al
		or     $0x80,%al
		and    $0xff,%eax
		xor    %ebx,%ebx
		mov    lbInkey,%bl
		cmp    $0x7f,%ebx
		setle  %bl
		mov    %bl,lbKeyOn(%eax)
		jmp    jump_8c64c
	jump_8c5f6:
		xor    %ah,%ah
		mov    %ah,lbInkey_prefixed
		mov    lbInkey,%al
		and    $0x7f,%al
		and    $0xff,%eax
		xor    %ebx,%ebx
		mov    lbInkey,%bl
		cmp    $0x7f,%ebx
		setle  %bl
		mov    %bl,lbKeyOn(%eax)
		cmpb   $0x0,lbKeyOn(%eax)
		je     jump_8c64c
		mov    keyboard_buffer_write_index,%ebx
		mov    %eax,keyboard_buffer(,%ebx,4)
		mov    keyboard_buffer_write_index,%ebx
		inc    %ebx
		and    $0xf,%ebx
		cmp    keyboard_buffer_read_index,%ebx
		je     jump_8c64c
		mov    %ebx,keyboard_buffer_write_index
	jump_8c64c:
		mov    lbInkey,%bl
		mov    %bl,oinkey
		xor    %bh,%bh
		mov    %bh,lbInkeyFlags
		cmpb   $0x0,lbKeyOn+42
		jne    jump_8c672
		cmpb   $0x0,lbKeyOn+54
		je     jump_8c679
	jump_8c672:
		orb    $0x10,lbInkeyFlags
	jump_8c679:
		cmpb   $0x0,lbKeyOn+29
		jne    jump_8c68b
		cmpb   $0x0,lbKeyOn+157
		je     jump_8c692
	jump_8c68b:
		orb    $0x20,lbInkeyFlags
	jump_8c692:
		cmpb   $0x0,lbKeyOn+56
		jne    jump_8c6a4
		cmpb   $0x0,lbKeyOn+184
		je     jump_8c6ab
	jump_8c6a4:
		orb    $0x40,lbInkeyFlags
	jump_8c6ab:
		cmpb   $0x0,lbKeyOn(%eax)
		je     jump_8c6c0
		mov    lbInkeyFlags,%bl
		or     %bl,lbKeyOn(%eax)
	jump_8c6c0:
		mov    $0x61,%edx
		sub    %eax,%eax
		in     (%dx),%al
		cwtl
		mov    %eax,%ebx
		or     $0x80,%al
		out    %al,(%dx)
		mov    %bl,%al
		out    %al,(%dx)
		xor    %eax,%eax
		mov    lbInkey,%al
		cmp    $0x80,%eax
		jge    jump_8c6fc
		cmpb   $0x0,lbIInkey
		jne    jump_8c6fc
		mov    lbInkey,%al
		mov    %al,lbIInkey
		mov    lbInkeyFlags,%al
		mov    %al,lbIInkeyFlags
	jump_8c6fc:
		mov    $0x20,%al
		mov    $0x20,%edx
		out    %al,(%dx)
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
		popa
		iret


.section .rodata

GLOBAL (ASM_lbInkeyToAscii)
		.ascii  "\x00\x00"
		.ascii  "1234567890-=\x08\t"
		.ascii  "qwertyuiop[]\x00\x00"
		.ascii  "asdfghjkl;'`\x00"
		.ascii  "#zxcvbnm,./\x00\x2a"
		.ascii  "\x00\x20\x00\x00\x00\x00\x00\x00"
		.ascii  "\x00\x00\x00\x00\x00\x00\x00\x00"
		.ascii  "\x00\x00\x2d\x00\x00\x00\x2b\x00"
		.ascii  "\x00\x00\x00\x00\x00\x00\x5c\x00"
		.ascii  "\x00\x00\x00\x00\x00\x00\x00\x00"
		.ascii  "\x2f\x00\x00"
		.ascii  "()/*\x00"
		.ascii  "\x00\x00\x00\x00\x00\x00\x00\x00"
		.ascii  "\x00\x2e\x00\x00\x00\x00\x00\x00"
		.ascii  "\x00\x00\x00\x00\x00\x00\x00\x00"
		.ascii  "\x00\x00\x21\x22\x9c"
		.ascii  "$%^&*()_+\x08\t"
		.ascii  "QWERTYUIOP{}\x00\x00"
		.ascii  "ASDFGHJKL:@~\x00"
		.ascii  "~ZXCVBNM<>?\x00\x2a"
		.ascii  "\x00\x20\x00\x00\x00\x00\x00\x00"
		.ascii  "\x00\x00\x00\x00\x00\x00\x00\x00"
		.ascii  "\x00\x00\x2d\x00\x00\x00\x2b\x00"
		.ascii  "\x00\x00\x00\x00\x00\x00\x7c\x00"
		.fill   0x8
		.ascii  "\x2f\x00\x00"
		.ascii "()/*\x00"
		.fill   0x8
		.ascii  "\x00\x2e\x00\x00\x00\x00\x00\x00"
		.fill   0x8

GLOBAL (lbKeyNames)
		.long	0x0
		.long   aKbEscape
		.long   aKb1
		.long   aKb2
		.long   aKb3
		.long   aKb4
		.long   aKb5
		.long   aKb6
		.long   aKb7
		.long   aKb8
		.long   aKb9
		.long   aKb0
		.long   aKbMinus
		.long   aKbEqu
		.long   aKbBackspace
		.long   aKbTab
		.long   aKbQ
		.long   aKbW
		.long   aKbE
		.long   aKbR
		.long   aKbT
		.long   aKbY
		.long   aKbU
		.long   aKbI
		.long   aKbO
		.long   aKbP
		.long   aKbOSq
		.long   aKbCSq
		.long   aKbReturn
		.long   aKbLeftCtrl
		.long   aKbA
		.long   aKbS
		.long   aKbD
		.long   aKbF
		.long   aKbG
		.long   aKbH
		.long   aKbJ
		.long   aKbK
		.long   aKbL
		.long   aKbSemiclm
		.long   aKbUClm
		.long   aKbUClmb
		.long   aKbLeftShift
		.long   aKbHash
		.long   aKbZ
		.long   aKbX
		.long   aKbC
		.long   aKbV
		.long   aKbB
		.long   aKbN
		.long   aKbM
		.long   aKbComa
		.long   aKbDot
		.long   aKbSlash
		.long   aKbRightShift
		.long   aKbKpAster
		.long   aKbLeftAlt
		.long   aKbSpace
		.long   aKbCapslock
		.long   aKbF1
		.long   aKbF2
		.long   aKbF3
		.long   aKbF4
		.long   aKbF5
		.long   aKbF6
		.long   aKbF7
		.long   aKbF8
		.long   aKbF9
		.long   aKbF10
		.long   aKbNumlock
		.long   aKbScrlock
		.long   aKbKp7
		.long   aKbKp8
		.long   aKbKp9
		.long   aKbKpMins
		.long   aKbKp4
		.long   aKbKp5
		.long   aKbKp6
		.long   aKbKpPlus
		.long   aKbKp1
		.long   aKbKp2
		.long   aKbKp3
		.long   aKbKp0
		.long   aKbKpDot
		.fill   0x8
		.long   aKbBSlash
		.long   aKbF11
		.long   aKbF12
		.fill   0x10c
		.long   aKbEnter
		.long   aKbRightCtrl
		.fill   0x5c
		.long   aKbKpSlash
		.long	0x0
		.long   aKbPrintScr
		.long   aKbRightAlt
		.fill   0x38
		.long   aKbHome
		.long   aKbUp
		.long   aKbPgup
		.long	0x0
		.long   aKbLeft
		.long	0x0
		.long   aKbRight
		.long	0x0
		.long   aKbEnd
		.long   aKbDown
		.long   aKbPgdn
		.long   aKbInsert
		.long   aKbDelete

aKbEscape:	/* 0x15D154 */
		.string "ESCAPE"
aKb1:	/* 0x15D15B */
		.ascii  "\x31\x00"
aKb2:	/* 0x15D15D */
		.ascii  "\x32\x00"
aKb3:	/* 0x15D15F */
		.ascii  "\x33\x00"
aKb4:	/* 0x15D161 */
		.ascii  "\x34\x00"
aKb5:	/* 0x15D163 */
		.ascii  "\x35\x00"
aKb6:	/* 0x15D165 */
		.ascii  "\x36\x00"
aKb7:	/* 0x15D167 */
		.ascii  "\x37\x00"
aKb8:	/* 0x15D169 */
		.ascii  "\x38\x00"
aKb9:	/* 0x15D16B */
		.ascii  "\x39\x00"
aKb0:	/* 0x15D16D */
		.ascii  "\x30\x00"
aKbMinus:	/* 0x15D16F */
		.ascii  "\x2d\x00"
aKbEqu:	/* 0x15D171 */
		.ascii  "\x3d\x00"
aKbBackspace:	/* 0x15D173 */
		.string "BACKSPACE"
aKbTab:	/* 0x15D17D */
		.ascii  "\x54\x41\x42\x00"
aKbQ:	/* 0x15D181 */
		.ascii  "\x51\x00"
aKbW:	/* 0x15D183 */
		.ascii  "\x57\x00"
aKbE:	/* 0x15D185 */
		.ascii  "\x45\x00"
aKbR:	/* 0x15D187 */
		.ascii  "\x52\x00"
aKbT:	/* 0x15D189 */
		.ascii  "\x54\x00"
aKbY:	/* 0x15D18B */
		.ascii  "\x59\x00"
aKbU:	/* 0x15D18D */
		.ascii  "\x55\x00"
aKbI:	/* 0x15D18F */
		.ascii  "\x49\x00"
aKbO:	/* 0x15D191 */
		.ascii  "\x4f\x00"
aKbP:	/* 0x15D193 */
		.ascii  "\x50\x00"
aKbOSq:	/* 0x15D195 */
		.ascii  "\x5b\x00"
aKbCSq:	/* 0x15D197 */
		.ascii  "\x5d\x00"
aKbReturn:	/* 0x15D199 */
		.string "RETURN"
aKbLeftCtrl:	/* 0x15D1A0 */
		.string "LEFT CTRL"
aKbA:	/* 0x15D1AA */
		.ascii  "\x41\x00"
aKbS:	/* 0x15D1AC */
		.ascii  "\x53\x00"
aKbD:	/* 0x15D1AE */
		.ascii  "\x44\x00"
aKbF:	/* 0x15D1B0 */
		.ascii  "\x46\x00"
aKbG:	/* 0x15D1B2 */
		.ascii  "\x47\x00"
aKbH:	/* 0x15D1B4 */
		.ascii  "\x48\x00"
aKbJ:	/* 0x15D1B6 */
		.ascii  "\x4a\x00"
aKbK:	/* 0x15D1B8 */
		.ascii  "\x4b\x00"
aKbL:	/* 0x15D1BA */
		.ascii  "\x4c\x00"
aKbSemiclm:	/* 0x15D1BC */
		.ascii  "\x3b\x00"
aKbUClm:	/* 0x15D1BE */
		.ascii  "\x27\x00"
aKbUClmb:	/* 0x15D1C0 */
		.ascii  "\x60\x00"
aKbLeftShift:	/* 0x15D1C2 */
		.string "LEFT SHIFT"
aKbHash:	/* 0x15D1CD */
		.ascii  "\x23\x00"
aKbZ:	/* 0x15D1CF */
		.ascii  "\x5a\x00"
aKbX:	/* 0x15D1D1 */
		.ascii  "\x58\x00"
aKbC:	/* 0x15D1D3 */
		.ascii  "\x43\x00"
aKbV:	/* 0x15D1D5 */
		.ascii  "\x56\x00"
aKbB:	/* 0x15D1D7 */
		.ascii  "\x42\x00"
aKbN:	/* 0x15D1D9 */
		.ascii  "\x4e\x00"
aKbM:	/* 0x15D1DB */
		.ascii  "\x4d\x00"
aKbComa:	/* 0x15D1DD */
		.ascii  "\x2c\x00"
aKbDot:	/* 0x15D1DF */
		.ascii  "\x2e\x00"
aKbSlash:	/* 0x15D1E1 */
		.ascii  "\x2f\x00"
aKbRightShift:	/* 0x15D1E3 */
		.string "RIGHT SHIFT"
aKbKpAster:	/* 0x15D1EF */
		.string "KP *"
aKbLeftAlt:	/* 0x15D1F4 */
		.string "LEFT ALT"
aKbSpace:	/* 0x15D1FD */
		.string "SPACE"
aKbCapslock:	/* 0x15D203 */
		.string "CAPSLOCK"
aKbF1:	/* 0x15D20C */
		.ascii  "\x46\x31\x00"
aKbF2:	/* 0x15D20F */
		.ascii  "\x46\x32\x00"
aKbF3:	/* 0x15D212 */
		.ascii  "\x46\x33\x00"
aKbF4:	/* 0x15D215 */
		.ascii  "\x46\x34\x00"
aKbF5:	/* 0x15D218 */
		.ascii  "\x46\x35\x00"
aKbF6:	/* 0x15D21B */
		.ascii  "\x46\x36\x00"
aKbF7:	/* 0x15D21E */
		.ascii  "\x46\x37\x00"
aKbF8:	/* 0x15D221 */
		.ascii  "\x46\x38\x00"
aKbF9:	/* 0x15D224 */
		.ascii  "\x46\x39\x00"
aKbF10:	/* 0x15D227 */
		.ascii  "\x46\x31\x30\x00"
aKbNumlock:	/* 0x15D22B */
		.string "NUMLOCK"
aKbScrlock:	/* 0x15D233 */
		.string "SCRLOCK"
aKbKp7:	/* 0x15D23B */
		.string "KP 7"
aKbKp8:	/* 0x15D240 */
		.string "KP 8"
aKbKp9:	/* 0x15D245 */
		.string "KP 9"
aKbKpMins:	/* 0x15D24A */
		.string "KP -"
aKbKp4:	/* 0x15D24F */
		.string "KP 4"
aKbKp5:	/* 0x15D254 */
		.string "KP 5"
aKbKp6:	/* 0x15D259 */
		.string "KP 6"
aKbKpPlus:	/* 0x15D25E */
		.string "KP +"
aKbKp1:	/* 0x15D263 */
		.string "KP 1"
aKbKp2:	/* 0x15D268 */
		.string "KP 2"
aKbKp3:	/* 0x15D26D */
		.string "KP 3"
aKbKp0:	/* 0x15D272 */
		.string "KP 0"
aKbKpDot:	/* 0x15D277 */
		.string "KP ."
aKbBSlash:	/* 0x15D27C */
		.ascii  "\x5c\x00"
aKbF11:	/* 0x15D27E */
		.ascii  "\x46\x31\x31\x00"
aKbF12:	/* 0x15D282 */
		.ascii  "\x46\x31\x32\x00"
aKbEnter:	/* 0x15D286 */
		.string "ENTER"
aKbRightCtrl:	/* 0x15D28C */
		.string "RIGHT CTRL"
aKbKpSlash:	/* 0x15D297 */
		.string "KP /"
aKbPrintScr:	/* 0x15D29C */
		.string "PRINT SCR"
aKbRightAlt:	/* 0x15D2A6 */
		.string "RIGHT ALT"
aKbHome:	/* 0x15D2B0 */
		.string "HOME"
aKbUp:	/* 0x15D2B5 */
		.ascii  "\x55\x50\x00"
aKbPgup:	/* 0x15D2B8 */
		.string "PGUP"
aKbLeft:	/* 0x15D2BD */
		.string "LEFT"
aKbRight:	/* 0x15D2C2 */
		.string "RIGHT"
aKbEnd:	/* 0x15D2C8 */
		.ascii  "\x45\x4e\x44\x00"
aKbDown:	/* 0x15D2CC */
		.string "DOWN"
aKbPgdn:	/* 0x15D2D1 */
		.string "PGDN"
aKbInsert:	/* 0x15D2D6 */
		.string "INSERT"
aKbDelete:	/* 0x15D2DD */
		.string "DELETE"

.data

oinkey:	/* 0x1C4774 */
		.long	0x0
GLOBAL (keyboard_buffer)	/* 1c4778 */
		.fill   0x40
GLOBAL (keyboard_buffer_write_index)	/* 1c47b8 */
		.long	0x0
GLOBAL (keyboard_buffer_read_index)	/* 1c47bc */
		.long	0x0

GLOBAL (lbInkey_prefixed)	/* 1e2f70 */
		.long	0x0

GLOBAL (lbKeyOn)			/* 1e2f74 */
		.fill   0x100

GLOBAL (lbInkey)	/* 9x1E3074 */
		.byte	0x0

lbInkeyFlags:
		.byte	0x0
lbIInkey:	/* 0x1E3076 */
		.byte	0x0
lbIInkeyFlags:
		.byte	0x0
GLOBAL (lbShift)	/* 0x1E3078 */
		.short  0x0

data_1e5ca0:
		.long	0x0
