
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif

.text

.global EXPORT_SYMBOL(SoundProgressMessage);

/*
 * This function allocates some DOS memory.  The variables where the results
 * are saved are never referred to directly.
 */
/*----------------------------------------------------------------*/
EAL_init_realmode_mem:
/*----------------------------------------------------------------*/
		/* XXX: bail out */
		mov    $0x1,%eax
		ret

		push   %ebx
		push   %ecx
		push   %edx
		cmpw   $0x0,EAL_realmode_segment
		je     jump_118476
		mov    $0x1,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_118476:
		mov    $0x1000,%edx
		mov    $0x100,%ebx
		mov    $0x31,%eax
		mov    %ebx,EAL_pr
		mov    $EAL_pr,%ebx
		mov    %edx,data_1edb30
		mov    %ebx,%edx
		call   ac_dos_int386
		mov    EAL_pr,%ax
		mov    %ax,EAL_realmode_segment
		mov    data_1edb38,%ax
		mov    data_1edb44,%ecx
		mov    %ax,data_1edb7c
		test   %ecx,%ecx
		sete   %al
		xor    %ah,%ah
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*
 * uint16_t EAL_alloc_dos_mem (uint16_t paragraph_count)
 * Returns the real-mode segment of the allocated block.
 */
/*----------------------------------------------------------------*/
EAL_alloc_dos_mem:	/* 1184d0 */
/*----------------------------------------------------------------*/
		/* XXX: bail out */
		xor    %eax,%eax
		ret

		push   %ebx
		push   %edx
		mov    $0x100,%edx
		mov    $EAL_pr,%ebx
		mov    %ax,data_1edb30
		mov    $0x31,%eax
		mov    %dx,EAL_pr
		mov    %ebx,%edx
		call   ac_dos_int386
		cmpl   $0x0,data_1edb44
		je     jump_118503
		xor    %eax,%eax
		pop    %edx
		pop    %ebx
		ret
	jump_118503:
		mov    EAL_pr,%ax
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
EAL_free_dos_mem:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    $0x100,%edx
		mov    $EAL_pr,%ebx
		mov    %ax,data_1edb38
		mov    $0x31,%eax
		mov    %dx,EAL_pr
		mov    %ebx,%edx
		call   ac_dos_int386
		cmpl   $0x0,data_1edb44
		sete   %al
		xor    %ah,%ah
		pop    %edx
		pop    %ebx
		ret


.data


EAL_pr:	/* 0x1EDB2C */
		.long	0x0
data_1edb30:
		.long	0x0
data_1edb34:
		.long	0x0
data_1edb38:
		.fill   0x8
data_1edb40:
		.long	0x0
data_1edb44:
		.long	0x0
EAL_rmr:	/* 0x1EDB48 */
		.fill   0x10
data_1edb58:
		.long	0x0
data_1edb5c:
		.long	0x0
data_1edb60:
		.long	0x0
data_1edb64:
		.fill   0x6
data_1edb6a:
		.short  0x0
data_1edb6c:
		.fill   0xa
data_1edb76:
		.short  0x0
data_1edb78:
		.short  0x0
EAL_realmode_segment:	/* 0x1EDB7A */
		.short  0x0
data_1edb7c:
		.long	0x0
